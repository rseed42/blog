{"db":[{"meta":{"exported_on":1527407291732,"version":"1.19.0"},"data":{"migrations":[{"id":1,"name":"1-create-tables.js","version":"init","currentVersion":"1.17"},{"id":2,"name":"2-create-fixtures.js","version":"init","currentVersion":"1.17"},{"id":3,"name":"1-post-excerpt.js","version":"1.3","currentVersion":"1.17"},{"id":4,"name":"1-codeinjection-post.js","version":"1.4","currentVersion":"1.17"},{"id":5,"name":"1-og-twitter-post.js","version":"1.5","currentVersion":"1.17"},{"id":6,"name":"1-add-backup-client.js","version":"1.7","currentVersion":"1.17"},{"id":7,"name":"1-add-permissions-redirect.js","version":"1.9","currentVersion":"1.17"},{"id":8,"name":"1-custom-template-post.js","version":"1.13","currentVersion":"1.17"},{"id":9,"name":"2-theme-permissions.js","version":"1.13","currentVersion":"1.17"},{"id":10,"name":"1-add-webhooks-table.js","version":"1.18","currentVersion":"1.18"},{"id":11,"name":"1-webhook-permissions.js","version":"1.19","currentVersion":"1.19"}],"posts":[{"id":"5a11dc914a0fc713dc689faa","uuid":"06158d69-48a6-4246-a898-fb6b869c3d64","title":"Welcome to my personal tech blog","slug":"welcome-to-ghost","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"First post.\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p>First post.</p>\n</div>","amp":"1","plaintext":"First post.","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2016-11-04 06:49:26","created_by":"1","updated_at":"2016-11-04 06:56:55","updated_by":"1","published_at":"2016-11-04 06:49:26","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null},{"id":"5a11dc914a0fc713dc689fab","uuid":"a1300ca1-4c70-4779-9374-0ddd25695d6c","title":"SQL Reinforcement Learner","slug":"sql-reinforcement-learner","mobiledoc":null,"html":"","amp":"2","plaintext":"","feature_image":null,"featured":0,"page":0,"status":"draft","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2016-11-04 06:58:05","created_by":"1","updated_at":"2016-11-04 06:58:05","updated_by":"1","published_at":null,"published_by":null,"custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null},{"id":"5a11dc914a0fc713dc689fac","uuid":"d25af4f7-1439-4117-b558-94c82a4f4222","title":"Educational Tutor with Heidelberg Backing","slug":"educational-tutor-with-heidelberg-backing","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"- Automate the educational process by having a tutor\\n- Remove piracy as a concern by packaging a lot of other services like detailed explanation, interactive sessions, etc.\\n- Backing of Heidelberg University and Professors\\n- Use VR for lab work\\n- Use computational resources of URZ for AI\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><ul>\n<li>Automate the educational process by having a tutor</li>\n<li>Remove piracy as a concern by packaging a lot of other services like detailed explanation, interactive sessions, etc.</li>\n<li>Backing of Heidelberg University and Professors</li>\n<li>Use VR for lab work</li>\n<li>Use computational resources of URZ for AI</li>\n</ul>\n</div>","amp":"3","plaintext":"* Automate the educational process by having a tutor\n * Remove piracy as a concern by packaging a lot of other services like detailed\n   explanation, interactive sessions, etc.\n * Backing of Heidelberg University and Professors\n * Use VR for lab work\n * Use computational resources of URZ for AI","feature_image":null,"featured":0,"page":0,"status":"draft","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2016-11-06 10:46:25","created_by":"1","updated_at":"2016-11-06 10:47:55","updated_by":"1","published_at":null,"published_by":null,"custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null},{"id":"5a11dc914a0fc713dc689fad","uuid":"477c90ec-e55c-4c4b-926e-f10d7fae374a","title":"Basherizer Script","slug":"basherizer-script","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"IDE for Bash scripts. Helpful for learning the tricky parts of Bash. Mostly what small catches to avoid like:\\n\\nif [ x -lt z ]\\n\\nwhere there are spaces needed.\\n\\n\\n* Make a list of different areas to use these tools for\\n* Check some nice commands in http://www.commandlinefu.com/\\n* Basically describe what we want to do and then the command\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p>IDE for Bash scripts. Helpful for learning the tricky parts of Bash. Mostly what small catches to avoid like:</p>\n<p>if [ x -lt z ]</p>\n<p>where there are spaces needed.</p>\n<ul>\n<li>Make a list of different areas to use these tools for</li>\n<li>Check some nice commands in <a href=\"http://www.commandlinefu.com/\">http://www.commandlinefu.com/</a></li>\n<li>Basically describe what we want to do and then the command</li>\n</ul>\n</div>","amp":"4","plaintext":"IDE for Bash scripts. Helpful for learning the tricky parts of Bash. Mostly what\nsmall catches to avoid like:\n\nif [ x -lt z ]\n\nwhere there are spaces needed.\n\n * Make a list of different areas to use these tools for\n * Check some nice commands in http://www.commandlinefu.com/\n * Basically describe what we want to do and then the command","feature_image":null,"featured":0,"page":0,"status":"draft","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2016-12-07 19:14:04","created_by":"1","updated_at":"2016-12-08 07:26:55","updated_by":"1","published_at":null,"published_by":null,"custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null},{"id":"5a11dc914a0fc713dc689fae","uuid":"26bfdc7a-2694-4200-b8e3-7a5bc051bcf1","title":"Oozie GUI","slug":"oozie-gui","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"Tools for easier development with Oozie\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p>Tools for easier development with Oozie</p>\n</div>","amp":"5","plaintext":"Tools for easier development with Oozie","feature_image":null,"featured":0,"page":0,"status":"draft","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2016-12-08 07:22:54","created_by":"1","updated_at":"2016-12-08 07:23:05","updated_by":"1","published_at":null,"published_by":null,"custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null},{"id":"5a11dc914a0fc713dc689faf","uuid":"d8ea4326-2587-4820-b196-b7e64d7acf91","title":"Data Engineering Content and Tools","slug":"data-engineering-content-and-tools","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"Tools and education materials regarding data engineering. Productivity tools for data engineering.\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p>Tools and education materials regarding data engineering. Productivity tools for data engineering.</p>\n</div>","amp":"6","plaintext":"Tools and education materials regarding data engineering. Productivity tools for\ndata engineering.","feature_image":null,"featured":0,"page":0,"status":"draft","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2016-12-08 07:23:21","created_by":"1","updated_at":"2016-12-08 07:24:42","updated_by":"1","published_at":null,"published_by":null,"custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null},{"id":"5a11dc914a0fc713dc689fb0","uuid":"f305c47e-37c2-40f4-a7c5-bc4b49df96d0","title":"API Services","slug":"api-services","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"MVPs for all kinds of services that can be offered.\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p>MVPs for all kinds of services that can be offered.</p>\n</div>","amp":"7","plaintext":"MVPs for all kinds of services that can be offered.","feature_image":null,"featured":0,"page":0,"status":"draft","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2016-12-08 07:24:50","created_by":"1","updated_at":"2016-12-08 07:25:05","updated_by":"1","published_at":null,"published_by":null,"custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null},{"id":"5a11dc914a0fc713dc689fb1","uuid":"b601973e-83a0-45f5-8180-73ee89bf8fb6","title":"Investment Ideas","slug":"investment-ideas","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"- Real Estate Funds (REIT)\\n- Crowdfunded Lending\\n- Stocks\\n\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><ul>\n<li>Real Estate Funds (REIT)</li>\n<li>Crowdfunded Lending</li>\n<li>Stocks</li>\n</ul>\n</div>","amp":"8","plaintext":"* Real Estate Funds (REIT)\n * Crowdfunded Lending\n * Stocks","feature_image":null,"featured":0,"page":0,"status":"draft","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2016-12-09 06:10:59","created_by":"1","updated_at":"2016-12-09 06:11:55","updated_by":"1","published_at":null,"published_by":null,"custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null},{"id":"5a11dc914a0fc713dc689fb2","uuid":"db709708-e0ad-4307-88d8-cd65e05cc60f","title":"Raspberry Pi 3 OS Installation","slug":"raspberry-pi-3-os-installation","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"#### Overview\\nRaspberry Pi 3 doesn't have a built-in hard disk drive, it uses a micro-SD card instead. This card is usually not sold together with the Raspberry, so it has to be bought and installed separately, unless you have a kit that provides that already.\\n\\nI would recommend to buy an SD card with at least 8 GB of memory. Due to the low price point I am using a 32 GB card.\\n\\nI decided to go with Raspbian Lite because I'd like to have a minimal system for my sensor network controller. Since it is not going to have a monitor attached to it, most of the software bloat in alternative distributions is useless here. However, this means that the only (comfortable) way to access the device is via SSH. SSH is disabled by default in the latest version (2016-11-25), which means that some configuration tweaks will be necessary before booting up with the SD card.\\n\\n#### Installing the image on the SD Card\\nFirst, we need to find the device name of the SD Card. The fdisk command shows us detailed information about disk drives and partitions:\\n```\\nvenelin@clevo ~ $ sudo fdisk -l\\n\\nDisk /dev/sda: 232.9 GiB, 250059350016 bytes, 488397168 sectors\\n...\\nDisk /dev/mmcblk0: 29.7 GiB, 31914983424 bytes, 62333952 sectors\\nUnits: sectors of 1 * 512 = 512 bytes\\nSector size (logical/physical): 512 bytes / 512 bytes\\nI/O size (minimum/optimal): 512 bytes / 512 bytes\\nDisklabel type: dos\\nDisk identifier: 0xe47ffcac\\n\\nDevice         Boot Start      End  Sectors  Size Id Type\\n/dev/mmcblk0p1       2048 62332927 62330880 29.7G  b W95 FAT32\\n\\n```\\nYou can see that the device name of the SD card is /dev/mmcblk0 and it has one partition /dev/mmcblk0p1. We will copy the disk image directly to the disk drive /dev/mmcblk0. \\n\\nFirst we need to unmount the existing partition if it is mounted:\\n```\\nvenelin@clevo ~ $ sudo umount /dev/mmcblk0p1\\n```\\nNow we can byte-copy the image with the dd command:\\n```\\nvenelin@clevo ~/Downloads $ sudo dd bs=4M if=2016-11-25-raspbian-jessie-lite.img of=/dev/mmcblk0\\n331+1 records in\\n331+1 records out\\n1390411776 bytes (1.4 GB) copied, 57.5949 s, 24.1 MB/s\\n```\\nLet's also flush any unwritten data to prepare the SD card for removal:\\n```\\nsudo sync\\n```\\nWe can check what the disk image now contains:\\n\\n```\\nvenelin@clevo ~/Downloads $ sudo fdisk -l\\n\\nDisk /dev/sda: 232.9 GiB, 250059350016 bytes, 488397168 sectors\\n...\\n\\nDisk /dev/mmcblk0: 29.7 GiB, 31914983424 bytes, 62333952 sectors\\nUnits: sectors of 1 * 512 = 512 bytes\\nSector size (logical/physical): 512 bytes / 512 bytes\\nI/O size (minimum/optimal): 512 bytes / 512 bytes\\nDisklabel type: dos\\nDisk identifier: 0x244b8248\\n\\nDevice         Boot  Start     End Sectors  Size Id Type\\n/dev/mmcblk0p1        8192  137215  129024   63M  c W95 FAT32 (LBA)\\n/dev/mmcblk0p2      137216 2715647 2578432  1.2G 83 Linux\\n```\\nThe Raspbian image contains two partitions:\\n\\n1. A FAT32 boot partition\\n2. The ext4 root partition of the OS\\n\\nWe need to modify some configuration files before we move the SD Card to the Raspberry device. For clarity I created manually the local directories where they could be mounted:\\n```\\nvenelin@clevo ~/Downloads $ sudo mkdir -p /media/venelin/raspi/boot\\nvenelin@clevo ~/Downloads $ sudo mkdir -p /media/venelin/raspi/root\\n```\\nThen mounted them with:\\n```\\nvenelin@clevo ~/Downloads $ sudo mount /dev/mmcblk0p1 -t vfat -o uid=venelin /media/venelin/raspi/boot/\\nvenelin@clevo /media/venelin/raspi $ sudo mount /dev/mmcblk0p2 /media/venelin/raspi/root/\\n```\\n\\n#### SSH Activation\\nAccording to the latest Raspbian Lite changelog\\n\\nhttp://downloads.raspberrypi.org/raspbian/release_notes.txt\\n\\nSSH is now disabled by default. I don't plan on using a monitor to access the Raspberry, therefore SSH must be enabled. This is fairly easy, we need only to create an empty file in the boot partition:\\n\\n```\\nvenelin@clevo ~ $ touch /media/venelin/raspi/boot/ssh\\n```\\n\\n#### Assigning a Static IP Address (Obsolete)\\n\\nNote: This has worked for Raspbian Jessie, but the latest Raspbian Stretch has changed some of the networking configuration, and the below \\nguide hasn't been tested with that yet!\\n\\nIn my home network I like to have a dedicated IP for any server machine. This is mostly caused by lack of flexibility of my router software in regard to DHCP. It is at least possible to configure the range for dynamic IPs, so I have restricted them to a certain range. Anything above that can be safely assigned a static IP address.\\n\\nIn the latest versions of Raspbian it is best to configure a static IP via the DHCP configuration file\\n\\n```\\n/etc/dhcpcd.conf\\n```\\n\\nThe static IP configuration is added to the end of the file:\\n```\\ninterface eth0\\n\\nstatic ip_address=192.168.0.100/24\\nstatic routers=192.168.0.1\\nstatic domain_name_servers=192.168.0.1\\n```\\n\\nIn this case my router has an IP 192.168.0.1.\\n\\n#### DHCP Configuration For Wifi (Updated for Raspbian Stretch)\\n\\nIn addition to enabling ssh via creating an empty file in the boot partition (see above), we also need to put the wifi credentials in the boot partition as well. Allegedly, *wpa_supplicant.conf* has to be fully specified, so we first copy the existing */etc/wpa_supplicant/wpa_supplicant.conf* to */boot/wpa_supplicant.conf*. Then, we can encode the wifi password:\\n```\\nwpa_passphrase \\\"wifi ssid\\\" \\\"wifi password\\\"\\n\\nnetwork={\\n\\tssid=\\\"wifi ssid\\\"\\n\\t#psk=\\\"wifi password\\\"\\n\\tpsk=7e74dd066afb9ee688dbc30cd223e2299e3429c7bc8081ed717ae2ef370ce4e1\\n}\\n```\\nThe full configuration file looks as follows:\\n```\\ncountry=DE\\nctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev\\nupdate_config=1\\nnetwork={\\n\\tssid=\\\"wifi ssid\\\"\\n\\tpsk=7e74dd066afb9ee688dbc30cd223e2299e3429c7bc8081ed717ae2ef370ce4e1\\n}\\n```\\nAfter the system boots for the first time, it moves the configuration file to its standard location at\\n\\n```\\n/etc/wpa_supplicant/wpa_supplicant.conf\\n```\\n\\n#### Prepare the SD Card for Removal\\n\\nThe mounted partitions should be unmounted before the SD card is removed:\\n```\\nvenelin@clevo ~ $ sudo umount /dev/mmcblk0p1 \\nvenelin@clevo ~ $ sudo umount /dev/mmcblk0p2\\n```\\n\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><h4 id=\"overview\">Overview</h4>\n<p>Raspberry Pi 3 doesn't have a built-in hard disk drive, it uses a micro-SD card instead. This card is usually not sold together with the Raspberry, so it has to be bought and installed separately, unless you have a kit that provides that already.</p>\n<p>I would recommend to buy an SD card with at least 8 GB of memory. Due to the low price point I am using a 32 GB card.</p>\n<p>I decided to go with Raspbian Lite because I'd like to have a minimal system for my sensor network controller. Since it is not going to have a monitor attached to it, most of the software bloat in alternative distributions is useless here. However, this means that the only (comfortable) way to access the device is via SSH. SSH is disabled by default in the latest version (2016-11-25), which means that some configuration tweaks will be necessary before booting up with the SD card.</p>\n<h4 id=\"installingtheimageonthesdcard\">Installing the image on the SD Card</h4>\n<p>First, we need to find the device name of the SD Card. The fdisk command shows us detailed information about disk drives and partitions:</p>\n<pre><code>venelin@clevo ~ $ sudo fdisk -l\n\nDisk /dev/sda: 232.9 GiB, 250059350016 bytes, 488397168 sectors\n...\nDisk /dev/mmcblk0: 29.7 GiB, 31914983424 bytes, 62333952 sectors\nUnits: sectors of 1 * 512 = 512 bytes\nSector size (logical/physical): 512 bytes / 512 bytes\nI/O size (minimum/optimal): 512 bytes / 512 bytes\nDisklabel type: dos\nDisk identifier: 0xe47ffcac\n\nDevice         Boot Start      End  Sectors  Size Id Type\n/dev/mmcblk0p1       2048 62332927 62330880 29.7G  b W95 FAT32\n\n</code></pre>\n<p>You can see that the device name of the SD card is /dev/mmcblk0 and it has one partition /dev/mmcblk0p1. We will copy the disk image directly to the disk drive /dev/mmcblk0.</p>\n<p>First we need to unmount the existing partition if it is mounted:</p>\n<pre><code>venelin@clevo ~ $ sudo umount /dev/mmcblk0p1\n</code></pre>\n<p>Now we can byte-copy the image with the dd command:</p>\n<pre><code>venelin@clevo ~/Downloads $ sudo dd bs=4M if=2016-11-25-raspbian-jessie-lite.img of=/dev/mmcblk0\n331+1 records in\n331+1 records out\n1390411776 bytes (1.4 GB) copied, 57.5949 s, 24.1 MB/s\n</code></pre>\n<p>Let's also flush any unwritten data to prepare the SD card for removal:</p>\n<pre><code>sudo sync\n</code></pre>\n<p>We can check what the disk image now contains:</p>\n<pre><code>venelin@clevo ~/Downloads $ sudo fdisk -l\n\nDisk /dev/sda: 232.9 GiB, 250059350016 bytes, 488397168 sectors\n...\n\nDisk /dev/mmcblk0: 29.7 GiB, 31914983424 bytes, 62333952 sectors\nUnits: sectors of 1 * 512 = 512 bytes\nSector size (logical/physical): 512 bytes / 512 bytes\nI/O size (minimum/optimal): 512 bytes / 512 bytes\nDisklabel type: dos\nDisk identifier: 0x244b8248\n\nDevice         Boot  Start     End Sectors  Size Id Type\n/dev/mmcblk0p1        8192  137215  129024   63M  c W95 FAT32 (LBA)\n/dev/mmcblk0p2      137216 2715647 2578432  1.2G 83 Linux\n</code></pre>\n<p>The Raspbian image contains two partitions:</p>\n<ol>\n<li>A FAT32 boot partition</li>\n<li>The ext4 root partition of the OS</li>\n</ol>\n<p>We need to modify some configuration files before we move the SD Card to the Raspberry device. For clarity I created manually the local directories where they could be mounted:</p>\n<pre><code>venelin@clevo ~/Downloads $ sudo mkdir -p /media/venelin/raspi/boot\nvenelin@clevo ~/Downloads $ sudo mkdir -p /media/venelin/raspi/root\n</code></pre>\n<p>Then mounted them with:</p>\n<pre><code>venelin@clevo ~/Downloads $ sudo mount /dev/mmcblk0p1 -t vfat -o uid=venelin /media/venelin/raspi/boot/\nvenelin@clevo /media/venelin/raspi $ sudo mount /dev/mmcblk0p2 /media/venelin/raspi/root/\n</code></pre>\n<h4 id=\"sshactivation\">SSH Activation</h4>\n<p>According to the latest Raspbian Lite changelog</p>\n<p><a href=\"http://downloads.raspberrypi.org/raspbian/release_notes.txt\">http://downloads.raspberrypi.org/raspbian/release_notes.txt</a></p>\n<p>SSH is now disabled by default. I don't plan on using a monitor to access the Raspberry, therefore SSH must be enabled. This is fairly easy, we need only to create an empty file in the boot partition:</p>\n<pre><code>venelin@clevo ~ $ touch /media/venelin/raspi/boot/ssh\n</code></pre>\n<h4 id=\"assigningastaticipaddressobsolete\">Assigning a Static IP Address (Obsolete)</h4>\n<p>Note: This has worked for Raspbian Jessie, but the latest Raspbian Stretch has changed some of the networking configuration, and the below<br>\nguide hasn't been tested with that yet!</p>\n<p>In my home network I like to have a dedicated IP for any server machine. This is mostly caused by lack of flexibility of my router software in regard to DHCP. It is at least possible to configure the range for dynamic IPs, so I have restricted them to a certain range. Anything above that can be safely assigned a static IP address.</p>\n<p>In the latest versions of Raspbian it is best to configure a static IP via the DHCP configuration file</p>\n<pre><code>/etc/dhcpcd.conf\n</code></pre>\n<p>The static IP configuration is added to the end of the file:</p>\n<pre><code>interface eth0\n\nstatic ip_address=192.168.0.100/24\nstatic routers=192.168.0.1\nstatic domain_name_servers=192.168.0.1\n</code></pre>\n<p>In this case my router has an IP 192.168.0.1.</p>\n<h4 id=\"dhcpconfigurationforwifiupdatedforraspbianstretch\">DHCP Configuration For Wifi (Updated for Raspbian Stretch)</h4>\n<p>In addition to enabling ssh via creating an empty file in the boot partition (see above), we also need to put the wifi credentials in the boot partition as well. Allegedly, <em>wpa_supplicant.conf</em> has to be fully specified, so we first copy the existing <em>/etc/wpa_supplicant/wpa_supplicant.conf</em> to <em>/boot/wpa_supplicant.conf</em>. Then, we can encode the wifi password:</p>\n<pre><code>wpa_passphrase &quot;wifi ssid&quot; &quot;wifi password&quot;\n\nnetwork={\n\tssid=&quot;wifi ssid&quot;\n\t#psk=&quot;wifi password&quot;\n\tpsk=7e74dd066afb9ee688dbc30cd223e2299e3429c7bc8081ed717ae2ef370ce4e1\n}\n</code></pre>\n<p>The full configuration file looks as follows:</p>\n<pre><code>country=DE\nctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev\nupdate_config=1\nnetwork={\n\tssid=&quot;wifi ssid&quot;\n\tpsk=7e74dd066afb9ee688dbc30cd223e2299e3429c7bc8081ed717ae2ef370ce4e1\n}\n</code></pre>\n<p>After the system boots for the first time, it moves the configuration file to its standard location at</p>\n<pre><code>/etc/wpa_supplicant/wpa_supplicant.conf\n</code></pre>\n<h4 id=\"preparethesdcardforremoval\">Prepare the SD Card for Removal</h4>\n<p>The mounted partitions should be unmounted before the SD card is removed:</p>\n<pre><code>venelin@clevo ~ $ sudo umount /dev/mmcblk0p1 \nvenelin@clevo ~ $ sudo umount /dev/mmcblk0p2\n</code></pre>\n</div>","amp":"9","plaintext":"Overview\nRaspberry Pi 3 doesn't have a built-in hard disk drive, it uses a micro-SD card\ninstead. This card is usually not sold together with the Raspberry, so it has to\nbe bought and installed separately, unless you have a kit that provides that\nalready.\n\nI would recommend to buy an SD card with at least 8 GB of memory. Due to the low\nprice point I am using a 32 GB card.\n\nI decided to go with Raspbian Lite because I'd like to have a minimal system for\nmy sensor network controller. Since it is not going to have a monitor attached\nto it, most of the software bloat in alternative distributions is useless here.\nHowever, this means that the only (comfortable) way to access the device is via\nSSH. SSH is disabled by default in the latest version (2016-11-25), which means\nthat some configuration tweaks will be necessary before booting up with the SD\ncard.\n\nInstalling the image on the SD Card\nFirst, we need to find the device name of the SD Card. The fdisk command shows\nus detailed information about disk drives and partitions:\n\nvenelin@clevo ~ $ sudo fdisk -l\n\nDisk /dev/sda: 232.9 GiB, 250059350016 bytes, 488397168 sectors\n...\nDisk /dev/mmcblk0: 29.7 GiB, 31914983424 bytes, 62333952 sectors\nUnits: sectors of 1 * 512 = 512 bytes\nSector size (logical/physical): 512 bytes / 512 bytes\nI/O size (minimum/optimal): 512 bytes / 512 bytes\nDisklabel type: dos\nDisk identifier: 0xe47ffcac\n\nDevice         Boot Start      End  Sectors  Size Id Type\n/dev/mmcblk0p1       2048 62332927 62330880 29.7G  b W95 FAT32\n\n\n\nYou can see that the device name of the SD card is /dev/mmcblk0 and it has one\npartition /dev/mmcblk0p1. We will copy the disk image directly to the disk drive\n/dev/mmcblk0.\n\nFirst we need to unmount the existing partition if it is mounted:\n\nvenelin@clevo ~ $ sudo umount /dev/mmcblk0p1\n\n\nNow we can byte-copy the image with the dd command:\n\nvenelin@clevo ~/Downloads $ sudo dd bs=4M if=2016-11-25-raspbian-jessie-lite.img of=/dev/mmcblk0\n331+1 records in\n331+1 records out\n1390411776 bytes (1.4 GB) copied, 57.5949 s, 24.1 MB/s\n\n\nLet's also flush any unwritten data to prepare the SD card for removal:\n\nsudo sync\n\n\nWe can check what the disk image now contains:\n\nvenelin@clevo ~/Downloads $ sudo fdisk -l\n\nDisk /dev/sda: 232.9 GiB, 250059350016 bytes, 488397168 sectors\n...\n\nDisk /dev/mmcblk0: 29.7 GiB, 31914983424 bytes, 62333952 sectors\nUnits: sectors of 1 * 512 = 512 bytes\nSector size (logical/physical): 512 bytes / 512 bytes\nI/O size (minimum/optimal): 512 bytes / 512 bytes\nDisklabel type: dos\nDisk identifier: 0x244b8248\n\nDevice         Boot  Start     End Sectors  Size Id Type\n/dev/mmcblk0p1        8192  137215  129024   63M  c W95 FAT32 (LBA)\n/dev/mmcblk0p2      137216 2715647 2578432  1.2G 83 Linux\n\n\nThe Raspbian image contains two partitions:\n\n 1. A FAT32 boot partition\n 2. The ext4 root partition of the OS\n\nWe need to modify some configuration files before we move the SD Card to the\nRaspberry device. For clarity I created manually the local directories where\nthey could be mounted:\n\nvenelin@clevo ~/Downloads $ sudo mkdir -p /media/venelin/raspi/boot\nvenelin@clevo ~/Downloads $ sudo mkdir -p /media/venelin/raspi/root\n\n\nThen mounted them with:\n\nvenelin@clevo ~/Downloads $ sudo mount /dev/mmcblk0p1 -t vfat -o uid=venelin /media/venelin/raspi/boot/\nvenelin@clevo /media/venelin/raspi $ sudo mount /dev/mmcblk0p2 /media/venelin/raspi/root/\n\n\nSSH Activation\nAccording to the latest Raspbian Lite changelog\n\nhttp://downloads.raspberrypi.org/raspbian/release_notes.txt\n\nSSH is now disabled by default. I don't plan on using a monitor to access the\nRaspberry, therefore SSH must be enabled. This is fairly easy, we need only to\ncreate an empty file in the boot partition:\n\nvenelin@clevo ~ $ touch /media/venelin/raspi/boot/ssh\n\n\nAssigning a Static IP Address (Obsolete)\nNote: This has worked for Raspbian Jessie, but the latest Raspbian Stretch has\nchanged some of the networking configuration, and the below\nguide hasn't been tested with that yet!\n\nIn my home network I like to have a dedicated IP for any server machine. This is\nmostly caused by lack of flexibility of my router software in regard to DHCP. It\nis at least possible to configure the range for dynamic IPs, so I have\nrestricted them to a certain range. Anything above that can be safely assigned a\nstatic IP address.\n\nIn the latest versions of Raspbian it is best to configure a static IP via the\nDHCP configuration file\n\n/etc/dhcpcd.conf\n\n\nThe static IP configuration is added to the end of the file:\n\ninterface eth0\n\nstatic ip_address=192.168.0.100/24\nstatic routers=192.168.0.1\nstatic domain_name_servers=192.168.0.1\n\n\nIn this case my router has an IP 192.168.0.1.\n\nDHCP Configuration For Wifi (Updated for Raspbian Stretch)\nIn addition to enabling ssh via creating an empty file in the boot partition\n(see above), we also need to put the wifi credentials in the boot partition as\nwell. Allegedly, wpa_supplicant.conf  has to be fully specified, so we first\ncopy the existing /etc/wpa_supplicant/wpa_supplicant.conf  to \n/boot/wpa_supplicant.conf. Then, we can encode the wifi password:\n\nwpa_passphrase \"wifi ssid\" \"wifi password\"\n\nnetwork={\n\tssid=\"wifi ssid\"\n\t#psk=\"wifi password\"\n\tpsk=7e74dd066afb9ee688dbc30cd223e2299e3429c7bc8081ed717ae2ef370ce4e1\n}\n\n\nThe full configuration file looks as follows:\n\ncountry=DE\nctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev\nupdate_config=1\nnetwork={\n\tssid=\"wifi ssid\"\n\tpsk=7e74dd066afb9ee688dbc30cd223e2299e3429c7bc8081ed717ae2ef370ce4e1\n}\n\n\nAfter the system boots for the first time, it moves the configuration file to\nits standard location at\n\n/etc/wpa_supplicant/wpa_supplicant.conf\n\n\nPrepare the SD Card for Removal\nThe mounted partitions should be unmounted before the SD card is removed:\n\nvenelin@clevo ~ $ sudo umount /dev/mmcblk0p1 \nvenelin@clevo ~ $ sudo umount /dev/mmcblk0p2","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2016-12-17 13:07:44","created_by":"1","updated_at":"2017-11-18 22:14:48","updated_by":"1","published_at":"2016-12-18 16:20:36","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null},{"id":"5a11dc914a0fc713dc689fb3","uuid":"5caca898-3a62-4ad4-8c55-12dc3e9cac08","title":"Configuration of a Clean Raspberrry Pi 3 Installation","slug":"configuration-of-a-clean-raspberrry-pi-3-installation-2","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"#### Booting Up\\n\\nWe can now install the SD card and make some additional configurations to allows us to start using the Raspberry. I am assuming that it will be connected via LAN. This is always the safest option. Wifi can be setup later.\\n\\n1. The SD card is put faced down in the Raspberry. There should be only one way to do that.\\n2. Power up the Raspberry.\\n\\nYou should see the green LED blinking. If only the read one is on, then there might be some problem with the image on the SD card. It is also a good idea to check on the LAN port to see that the TX/RX lights are also active.\\n\\n#### Connecting to the Raspberry\\nIn your home router, look for some menu like\\n\\n```\\nDHCP Client Devices\\n```\\nIn my case, the entry looks like this:\\n```\\nraspberrypi\\tB8:27:EB:42:C4:23\\t192.168.0.100\\tEthernet(100Mbps)\\tN/A\\t*** STATIC IP ADDRESS **\\n```\\nIf you have configured a static IP, this check might not be necessary, but I find it useful anyway. We can also ping it to check the the connectivity is OK:\\n```\\nvenelin@clevo ~ $ ping -c4 192.168.0.100\\nPING 192.168.0.100 (192.168.0.100) 56(84) bytes of data.\\n64 bytes from 192.168.0.100: icmp_seq=1 ttl=64 time=4.12 ms\\n64 bytes from 192.168.0.100: icmp_seq=2 ttl=64 time=1.15 ms\\n64 bytes from 192.168.0.100: icmp_seq=3 ttl=64 time=1.34 ms\\n64 bytes from 192.168.0.100: icmp_seq=4 ttl=64 time=1.07 ms\\n\\n--- 192.168.0.100 ping statistics ---\\n4 packets transmitted, 4 received, 0% packet loss, time 3004ms\\nrtt min/avg/max/mdev = 1.075/1.924/4.120/1.271 ms\\n```\\nWith the last check we can see if the SSH port is available:\\n```\\nvenelin@clevo ~ $ telnet 192.168.0.100 22\\nTrying 192.168.0.100...\\nConnected to 192.168.0.100.\\nEscape character is '^]'.\\nSSH-2.0-OpenSSH_6.7p1 Raspbian-5+deb8u3\\n^]\\nProtocol mismatch.\\nConnection closed by foreign host.\\n```\\nWe can now connect to the Raspberry. Raspbian is shipped with a default sudo-enabled user called \\\"pi\\\":\\n\\n* Default Raspbian user: *pi*\\n* Default Raspbian user password: *raspbian* (*raspberry* for Stretch)\\n\\nLet's connect with that user and change the credentials:\\n\\n```\\nvenelin@clevo ~ $ ssh pi@192.168.0.100\\nThe authenticity of host '192.168.0.100 (192.168.0.100)' can't be established.\\nECDSA key fingerprint is bb:61:88:d9:2c:58:a5:57:10:3f:f8:ce:46:cc:0b:98.\\nAre you sure you want to continue connecting (yes/no)? yes\\nWarning: Permanently added '192.168.0.100' (ECDSA) to the list of known hosts.\\npi@192.168.0.100's password: \\n\\nThe programs included with the Debian GNU/Linux system are free software;\\nthe exact distribution terms for each program are described in the\\nindividual files in /usr/share/doc/*/copyright.\\n\\nDebian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent\\npermitted by applicable law.\\n\\nSSH is enabled and the default password for the 'pi' user has not been changed.\\nThis is a security risk - please login as the 'pi' user and type 'passwd' to set a new password.\\n```\\n\\nSince pi has sudo rights, we need to immediately change this password.\\n\\n```\\npi@raspberrypi:~ $ passwd\\nChanging password for pi.\\n(current) UNIX password: \\nEnter new UNIX password: \\nRetype new UNIX password: \\npasswd: password updated successfully\\n```\\n\\n#### Changing the Host Name\\nShorter names are always better for frequent tasks, therefore I like to name my Raspberry \\\"raspi\\\". However, be careful with these steps or you might lose connectivity and you might need to start all over again.\\n\\nFirst, check the name of the system:\\n\\n```\\npi@raspberrypi:~ $ hostname\\nraspberrypi\\n```\\nLet's change that:\\n```\\npi@raspberrypi:~ $ sudo hostname -b raspi\\npi@raspberrypi:~ $ hostname\\nraspi\\n```\\nThis is not the end of it, however. The original name is still contained in several configuration files. We can easily find them with a recursive grep:\\n```\\npi@raspberrypi:~ $ sudo grep -lr \\\"raspberrypi\\\" /etc/*\\nsudo: unable to resolve host raspi\\n/etc/apt/sources.list.d/raspi.list\\n/etc/hostname\\n/etc/hosts\\n/etc/ssh/ssh_host_dsa_key.pub\\n/etc/ssh/ssh_host_key\\n/etc/ssh/ssh_host_ed25519_key.pub\\n/etc/ssh/ssh_host_key.pub\\n/etc/ssh/ssh_host_rsa_key.pub\\n/etc/ssh/ssh_host_ecdsa_key.pub\\n```\\nParticularly worrisome are some SSH configuration files. If we blindly go about it, SSH will not work and we are locked out. First, however, we need to change the network name. Replace the original name in /etc/hosts with \\\"raspi\\\" and reboot the system:\\n\\n```\\nnano /etc/hosts\\n```\\nReboot:\\n```\\nsudo reboot\\n```\\n\\nYou can see that the network host name is now changed if you try to ping it from within the system:\\n\\n```\\npi@raspberrypi:~ $ ping -c2 raspi\\nPING raspi (127.0.1.1) 56(84) bytes of data.\\n64 bytes from raspi (127.0.1.1): icmp_seq=1 ttl=64 time=0.109 ms\\n64 bytes from raspi (127.0.1.1): icmp_seq=2 ttl=64 time=0.057 ms\\n\\n--- raspi ping statistics ---\\n2 packets transmitted, 2 received, 0% packet loss, time 999ms\\nrtt min/avg/max/mdev = 0.057/0.083/0.109/0.026 ms\\n```\\n\\nDespite the change of the network host name, you will notice that the Linux host name is still the old one. Change it in the hostname file:\\n```\\nnano /etc/hostname\\n```\\n\\nNow we need to perform a delicate change on SSH. Please, make sure that you don't disconnect from SSH until this is done.\\n\\nWe have seen that many SSH certificates are tied to the original name of the system. We need to delete and regenerate these. \\n\\nRemove the old SSH certificates:\\n```\\npi@raspi:~ $ sudo rm /etc/ssh/ssh_host_*\\n```\\nImmediately reconfigure the SSH server to regenerate the certificates:\\n```\\npi@raspi:~ $ sudo dpkg-reconfigure openssh-server\\nCreating SSH2 RSA key; this may take some time ...\\n2048 6a:3a:d8:1d:c7:51:61:ca:a4:f5:bc:f0:9b:b0:fd:73 /etc/ssh/ssh_host_rsa_key.pub (RSA)\\nCreating SSH2 DSA key; this may take some time ...\\n1024 82:7a:cb:1d:65:63:5b:96:64:b8:83:be:a5:42:b8:b1 /etc/ssh/ssh_host_dsa_key.pub (DSA)\\nCreating SSH2 ECDSA key; this may take some time ...\\n256 b8:04:9d:e0:6e:52:cc:d2:f4:52:c9:ad:76:5a:e4:35 /etc/ssh/ssh_host_ecdsa_key.pub (ECDSA)\\nCreating SSH2 ED25519 key; this may take some time ...\\n256 e1:2f:19:b7:b2:d8:14:87:63:b9:e1:26:5c:97:58:03 /etc/ssh/ssh_host_ed25519_key.pub (ED25519)\\n```\\nRestart SSH:\\n```\\npi@raspi:~ $ sudo service ssh restart\\n```\\n\\nreboot the system:\\n```\\npi@raspi:~ $ sudo reboot\\n```\\nIf you try to connect now, you will notice that there is an error recognizing the SSH fingerprint. I usually fix this by removing the last entry in the known_hosts of my laptop's SSH directory:\\n```\\nvenelin@clevo ~ $ emacs ~/.ssh/known_hosts\\n```\\nAfter connecting\\n```\\nvenelin@clevo ~ $ ssh pi@192.168.0.100\\nThe authenticity of host '192.168.0.100 (192.168.0.100)' can't be established.\\nECDSA key fingerprint is 73:b4:f5:c4:7a:c7:65:83:5b:6e:b4:3d:02:d4:78:f3.\\nAre you sure you want to continue connecting (yes/no)? yes\\nWarning: Permanently added '192.168.0.100' (ECDSA) to the list of known hosts.\\npi@192.168.0.100's password: \\n\\nThe programs included with the Debian GNU/Linux system are free software;\\nthe exact distribution terms for each program are described in the\\nindividual files in /usr/share/doc/*/copyright.\\n\\nDebian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent\\npermitted by applicable law.\\nLast login: Sun Dec 18 15:12:17 2016 from 192.168.0.29\\n```\\nyou will notice that the system is now properly named:\\n```\\npi@raspi:~ $ hostname\\nraspi\\n```\\nThis should do it.\\n\\n#### Adding a Custom User\\nThe first thing I like to do on the new system is to add my own user \\n\\n```\\npi@raspberrypi:~ $ sudo useradd -G sudo vpetkov\\n```\\n\\nSet the password for the new user\\n```\\npi@raspberrypi:~ $ sudo passwd vpetkov\\nEnter new UNIX password: \\nRetype new UNIX password: \\npasswd: password updated successfully\\n```\\n\\nWe can see that user \\\"pi\\\" is added by default to many additional group that enable access to some hardware features:\\n```\\npi@raspberrypi:~ $ id\\nuid=1000(pi) gid=1000(pi) groups=1000(pi),4(adm),20(dialout),24(cdrom),27(sudo),29(audio),44(video),46(plugdev),60(games),100(users),101(input),108(netdev),997(gpio),998(i2c),999(spi)\\n```\\nLet's add the newly created user to these groups\\n\\n```\\nsudo usermod -a -G adm vpetkov\\nsudo usermod -a -G dialout vpetkov\\nsudo usermod -a -G audio vpetkov\\nsudo usermod -a -G video vpetkov\\nsudo usermod -a -G plugdev vpetkov\\nsudo usermod -a -G input vpetkov\\nsudo usermod -a -G netdev vpetkov\\nsudo usermod -a -G gpio vpetkov\\nsudo usermod -a -G i2c vpetkov\\nsudo usermod -a -G spi vpetkov\\n```\\nWe should have more or less set up our custom user by now.\\n\\n```\\npi@raspberrypi:~ $ sudo su vpetkov\\nvpetkov@raspberrypi:/home/pi$ id\\nuid=1001(vpetkov) gid=1001(vpetkov) groups=1001(vpetkov),4(adm),20(dialout),27(sudo),29(audio),44(video),46(plugdev),101(input),108(netdev),997(gpio),998(i2c),999(spi)\\n```\\nWe can not reconnect with the user we want to use:\\n```\\nvenelin@clevo ~ $ ssh vpetkov@192.168.0.100\\nvpetkov@192.168.0.100's password: \\n\\nThe programs included with the Debian GNU/Linux system are free software;\\nthe exact distribution terms for each program are described in the\\nindividual files in /usr/share/doc/*/copyright.\\n\\nDebian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent\\npermitted by applicable law.\\nCould not chdir to home directory /home/vpetkov: No such file or directory\\n```\\nNotice that the home directory is missing. Let's rectify that:\\n```\\nvpetkov@raspi:/$ sudo mkdir /home/vpetkov\\n\\nWe trust you have received the usual lecture from the local System\\nAdministrator. It usually boils down to these three things:\\n\\n    #1) Respect the privacy of others.\\n    #2) Think before you type.\\n    #3) With great power comes great responsibility.\\n\\n[sudo] password for vpetkov: \\n```\\nChange ownership:\\n```\\nvpetkov@raspi:/$ sudo chown vpetkov:vpetkov /home/vpetkov\\n```\\nWhen we reconnect, our current working directory is now the proper use home directory.\\n\\n#### Simplifying SSH Access\\nBefore we start using the Raspberry system regularly, let's make that as easy as possible. First, we need to modify our SSH client config, so we don't need to type the full IP address all the time (alternatively, this can also be done with a DHCP configuration for the name of the raspberry if your router allows it).\\n\\nIf don't have an SSH client configuration file, create one in your SSH directory:\\n```\\nvenelin@clevo ~ $ touch ~/.ssh/config\\n```\\nInside it we only need to specify an alias for the IP and which user we want to login as:\\n\\n```\\nnano ~/.ssh/config\\n```\\nMy file contains this example configuration, based on the tutorial:\\n```\\nHost raspi\\n    HostName 192.168.0.100\\n    User vpetkov\\n```\\nNow it is sufficient to type\\n```\\nvenelin@clevo ~ $ ssh raspi\\n```\\nto connect to the Raspberry.\\n\\n#### Setting up SSH Keys\\nUsing a password to connect to remote systems is not only more cumbersome, but also more risky, compared to using SSH keys. Let's set up the keys. \\n\\nFirst, generate the SSH key with:\\n```\\nvenelin@clevo ~ $ ssh-keygen -t rsa\\nGenerating public/private rsa key pair.\\nEnter file in which to save the key (/home/venelin/.ssh/id_rsa): /home/venelin/.ssh/id_rsa_raspi3\\nEnter passphrase (empty for no passphrase): \\nEnter same passphrase again: \\nYour identification has been saved in /home/venelin/.ssh/id_rsa_raspi3.\\nYour public key has been saved in /home/venelin/.ssh/id_rsa_raspi3.pub.\\nThe key fingerprint is:\\nca:ae:42:45:34:0a:7d:fb:3c:c0:ff:f3:c2:13:a3:bc venelin@clevo\\nThe key's randomart image is:\\n+---[RSA 2048]----+\\n|.. .o            |\\n| ...o.           |\\n|  .+ .           |\\n|    =            |\\n|   . =  S        |\\n|  .  .=.o        |\\n| .   .o= o       |\\n|  .  .o *        |\\n|   ...E. =.      |\\n+-----------------+\\n```\\nNotice that several files are created in your ~/.ssh directory:\\n```\\nvenelin@clevo ~/.ssh $ ls -l\\ntotal 32\\n-rw-r--r-- 1 venelin venelin   55 Dec 18 16:42 config\\n...\\n-rw------- 1 venelin venelin 1766 Dec 18 16:46 id_rsa_raspi3\\n-rw-r--r-- 1 venelin venelin  395 Dec 18 16:46 id_rsa_raspi3.pub\\n```\\nWe need to copy the public key id_rsa_raspi3.pub to the Raspberry account. Fortunately, there is an easy command to do that and we don't even need to worry about chmod-ing the authorized_keys file anymore:\\n```\\nvenelin@clevo ~ $ ssh-copy-id raspi\\n/usr/bin/ssh-copy-id: INFO: attempting to log in with the new key(s), to filter out any that are already installed\\n/usr/bin/ssh-copy-id: INFO: 3 key(s) remain to be installed -- if you are prompted now it is to install the new keys\\nvpetkov@192.168.0.100's password: \\n\\nNumber of key(s) added: 3\\n\\nNow try logging into the machine, with:   \\\"ssh 'raspi'\\\"\\nand check to make sure that only the key(s) you wanted were added.\\n```\\nNotice that all public keys are copied over. If you need a more targeted approach, remove the rest or copy the file manually.\\n\\nNow connecting to the Raspberry is as easy as typing \\n```\\nvenelin@clevo ~ $ ssh raspi\\n\\nThe programs included with the Debian GNU/Linux system are free software;\\nthe exact distribution terms for each program are described in the\\nindividual files in /usr/share/doc/*/copyright.\\n\\nDebian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent\\npermitted by applicable law.\\nLast login: Sun Dec 18 15:51:37 2016 from 192.168.0.29\\nvpetkov@raspi:~$ \\n```\\n\\n\\n\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><h4 id=\"bootingup\">Booting Up</h4>\n<p>We can now install the SD card and make some additional configurations to allows us to start using the Raspberry. I am assuming that it will be connected via LAN. This is always the safest option. Wifi can be setup later.</p>\n<ol>\n<li>The SD card is put faced down in the Raspberry. There should be only one way to do that.</li>\n<li>Power up the Raspberry.</li>\n</ol>\n<p>You should see the green LED blinking. If only the read one is on, then there might be some problem with the image on the SD card. It is also a good idea to check on the LAN port to see that the TX/RX lights are also active.</p>\n<h4 id=\"connectingtotheraspberry\">Connecting to the Raspberry</h4>\n<p>In your home router, look for some menu like</p>\n<pre><code>DHCP Client Devices\n</code></pre>\n<p>In my case, the entry looks like this:</p>\n<pre><code>raspberrypi\tB8:27:EB:42:C4:23\t192.168.0.100\tEthernet(100Mbps)\tN/A\t*** STATIC IP ADDRESS **\n</code></pre>\n<p>If you have configured a static IP, this check might not be necessary, but I find it useful anyway. We can also ping it to check the the connectivity is OK:</p>\n<pre><code>venelin@clevo ~ $ ping -c4 192.168.0.100\nPING 192.168.0.100 (192.168.0.100) 56(84) bytes of data.\n64 bytes from 192.168.0.100: icmp_seq=1 ttl=64 time=4.12 ms\n64 bytes from 192.168.0.100: icmp_seq=2 ttl=64 time=1.15 ms\n64 bytes from 192.168.0.100: icmp_seq=3 ttl=64 time=1.34 ms\n64 bytes from 192.168.0.100: icmp_seq=4 ttl=64 time=1.07 ms\n\n--- 192.168.0.100 ping statistics ---\n4 packets transmitted, 4 received, 0% packet loss, time 3004ms\nrtt min/avg/max/mdev = 1.075/1.924/4.120/1.271 ms\n</code></pre>\n<p>With the last check we can see if the SSH port is available:</p>\n<pre><code>venelin@clevo ~ $ telnet 192.168.0.100 22\nTrying 192.168.0.100...\nConnected to 192.168.0.100.\nEscape character is '^]'.\nSSH-2.0-OpenSSH_6.7p1 Raspbian-5+deb8u3\n^]\nProtocol mismatch.\nConnection closed by foreign host.\n</code></pre>\n<p>We can now connect to the Raspberry. Raspbian is shipped with a default sudo-enabled user called &quot;pi&quot;:</p>\n<ul>\n<li>Default Raspbian user: <em>pi</em></li>\n<li>Default Raspbian user password: <em>raspbian</em> (<em>raspberry</em> for Stretch)</li>\n</ul>\n<p>Let's connect with that user and change the credentials:</p>\n<pre><code>venelin@clevo ~ $ ssh pi@192.168.0.100\nThe authenticity of host '192.168.0.100 (192.168.0.100)' can't be established.\nECDSA key fingerprint is bb:61:88:d9:2c:58:a5:57:10:3f:f8:ce:46:cc:0b:98.\nAre you sure you want to continue connecting (yes/no)? yes\nWarning: Permanently added '192.168.0.100' (ECDSA) to the list of known hosts.\npi@192.168.0.100's password: \n\nThe programs included with the Debian GNU/Linux system are free software;\nthe exact distribution terms for each program are described in the\nindividual files in /usr/share/doc/*/copyright.\n\nDebian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent\npermitted by applicable law.\n\nSSH is enabled and the default password for the 'pi' user has not been changed.\nThis is a security risk - please login as the 'pi' user and type 'passwd' to set a new password.\n</code></pre>\n<p>Since pi has sudo rights, we need to immediately change this password.</p>\n<pre><code>pi@raspberrypi:~ $ passwd\nChanging password for pi.\n(current) UNIX password: \nEnter new UNIX password: \nRetype new UNIX password: \npasswd: password updated successfully\n</code></pre>\n<h4 id=\"changingthehostname\">Changing the Host Name</h4>\n<p>Shorter names are always better for frequent tasks, therefore I like to name my Raspberry &quot;raspi&quot;. However, be careful with these steps or you might lose connectivity and you might need to start all over again.</p>\n<p>First, check the name of the system:</p>\n<pre><code>pi@raspberrypi:~ $ hostname\nraspberrypi\n</code></pre>\n<p>Let's change that:</p>\n<pre><code>pi@raspberrypi:~ $ sudo hostname -b raspi\npi@raspberrypi:~ $ hostname\nraspi\n</code></pre>\n<p>This is not the end of it, however. The original name is still contained in several configuration files. We can easily find them with a recursive grep:</p>\n<pre><code>pi@raspberrypi:~ $ sudo grep -lr &quot;raspberrypi&quot; /etc/*\nsudo: unable to resolve host raspi\n/etc/apt/sources.list.d/raspi.list\n/etc/hostname\n/etc/hosts\n/etc/ssh/ssh_host_dsa_key.pub\n/etc/ssh/ssh_host_key\n/etc/ssh/ssh_host_ed25519_key.pub\n/etc/ssh/ssh_host_key.pub\n/etc/ssh/ssh_host_rsa_key.pub\n/etc/ssh/ssh_host_ecdsa_key.pub\n</code></pre>\n<p>Particularly worrisome are some SSH configuration files. If we blindly go about it, SSH will not work and we are locked out. First, however, we need to change the network name. Replace the original name in /etc/hosts with &quot;raspi&quot; and reboot the system:</p>\n<pre><code>nano /etc/hosts\n</code></pre>\n<p>Reboot:</p>\n<pre><code>sudo reboot\n</code></pre>\n<p>You can see that the network host name is now changed if you try to ping it from within the system:</p>\n<pre><code>pi@raspberrypi:~ $ ping -c2 raspi\nPING raspi (127.0.1.1) 56(84) bytes of data.\n64 bytes from raspi (127.0.1.1): icmp_seq=1 ttl=64 time=0.109 ms\n64 bytes from raspi (127.0.1.1): icmp_seq=2 ttl=64 time=0.057 ms\n\n--- raspi ping statistics ---\n2 packets transmitted, 2 received, 0% packet loss, time 999ms\nrtt min/avg/max/mdev = 0.057/0.083/0.109/0.026 ms\n</code></pre>\n<p>Despite the change of the network host name, you will notice that the Linux host name is still the old one. Change it in the hostname file:</p>\n<pre><code>nano /etc/hostname\n</code></pre>\n<p>Now we need to perform a delicate change on SSH. Please, make sure that you don't disconnect from SSH until this is done.</p>\n<p>We have seen that many SSH certificates are tied to the original name of the system. We need to delete and regenerate these.</p>\n<p>Remove the old SSH certificates:</p>\n<pre><code>pi@raspi:~ $ sudo rm /etc/ssh/ssh_host_*\n</code></pre>\n<p>Immediately reconfigure the SSH server to regenerate the certificates:</p>\n<pre><code>pi@raspi:~ $ sudo dpkg-reconfigure openssh-server\nCreating SSH2 RSA key; this may take some time ...\n2048 6a:3a:d8:1d:c7:51:61:ca:a4:f5:bc:f0:9b:b0:fd:73 /etc/ssh/ssh_host_rsa_key.pub (RSA)\nCreating SSH2 DSA key; this may take some time ...\n1024 82:7a:cb:1d:65:63:5b:96:64:b8:83:be:a5:42:b8:b1 /etc/ssh/ssh_host_dsa_key.pub (DSA)\nCreating SSH2 ECDSA key; this may take some time ...\n256 b8:04:9d:e0:6e:52:cc:d2:f4:52:c9:ad:76:5a:e4:35 /etc/ssh/ssh_host_ecdsa_key.pub (ECDSA)\nCreating SSH2 ED25519 key; this may take some time ...\n256 e1:2f:19:b7:b2:d8:14:87:63:b9:e1:26:5c:97:58:03 /etc/ssh/ssh_host_ed25519_key.pub (ED25519)\n</code></pre>\n<p>Restart SSH:</p>\n<pre><code>pi@raspi:~ $ sudo service ssh restart\n</code></pre>\n<p>reboot the system:</p>\n<pre><code>pi@raspi:~ $ sudo reboot\n</code></pre>\n<p>If you try to connect now, you will notice that there is an error recognizing the SSH fingerprint. I usually fix this by removing the last entry in the known_hosts of my laptop's SSH directory:</p>\n<pre><code>venelin@clevo ~ $ emacs ~/.ssh/known_hosts\n</code></pre>\n<p>After connecting</p>\n<pre><code>venelin@clevo ~ $ ssh pi@192.168.0.100\nThe authenticity of host '192.168.0.100 (192.168.0.100)' can't be established.\nECDSA key fingerprint is 73:b4:f5:c4:7a:c7:65:83:5b:6e:b4:3d:02:d4:78:f3.\nAre you sure you want to continue connecting (yes/no)? yes\nWarning: Permanently added '192.168.0.100' (ECDSA) to the list of known hosts.\npi@192.168.0.100's password: \n\nThe programs included with the Debian GNU/Linux system are free software;\nthe exact distribution terms for each program are described in the\nindividual files in /usr/share/doc/*/copyright.\n\nDebian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent\npermitted by applicable law.\nLast login: Sun Dec 18 15:12:17 2016 from 192.168.0.29\n</code></pre>\n<p>you will notice that the system is now properly named:</p>\n<pre><code>pi@raspi:~ $ hostname\nraspi\n</code></pre>\n<p>This should do it.</p>\n<h4 id=\"addingacustomuser\">Adding a Custom User</h4>\n<p>The first thing I like to do on the new system is to add my own user</p>\n<pre><code>pi@raspberrypi:~ $ sudo useradd -G sudo vpetkov\n</code></pre>\n<p>Set the password for the new user</p>\n<pre><code>pi@raspberrypi:~ $ sudo passwd vpetkov\nEnter new UNIX password: \nRetype new UNIX password: \npasswd: password updated successfully\n</code></pre>\n<p>We can see that user &quot;pi&quot; is added by default to many additional group that enable access to some hardware features:</p>\n<pre><code>pi@raspberrypi:~ $ id\nuid=1000(pi) gid=1000(pi) groups=1000(pi),4(adm),20(dialout),24(cdrom),27(sudo),29(audio),44(video),46(plugdev),60(games),100(users),101(input),108(netdev),997(gpio),998(i2c),999(spi)\n</code></pre>\n<p>Let's add the newly created user to these groups</p>\n<pre><code>sudo usermod -a -G adm vpetkov\nsudo usermod -a -G dialout vpetkov\nsudo usermod -a -G audio vpetkov\nsudo usermod -a -G video vpetkov\nsudo usermod -a -G plugdev vpetkov\nsudo usermod -a -G input vpetkov\nsudo usermod -a -G netdev vpetkov\nsudo usermod -a -G gpio vpetkov\nsudo usermod -a -G i2c vpetkov\nsudo usermod -a -G spi vpetkov\n</code></pre>\n<p>We should have more or less set up our custom user by now.</p>\n<pre><code>pi@raspberrypi:~ $ sudo su vpetkov\nvpetkov@raspberrypi:/home/pi$ id\nuid=1001(vpetkov) gid=1001(vpetkov) groups=1001(vpetkov),4(adm),20(dialout),27(sudo),29(audio),44(video),46(plugdev),101(input),108(netdev),997(gpio),998(i2c),999(spi)\n</code></pre>\n<p>We can not reconnect with the user we want to use:</p>\n<pre><code>venelin@clevo ~ $ ssh vpetkov@192.168.0.100\nvpetkov@192.168.0.100's password: \n\nThe programs included with the Debian GNU/Linux system are free software;\nthe exact distribution terms for each program are described in the\nindividual files in /usr/share/doc/*/copyright.\n\nDebian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent\npermitted by applicable law.\nCould not chdir to home directory /home/vpetkov: No such file or directory\n</code></pre>\n<p>Notice that the home directory is missing. Let's rectify that:</p>\n<pre><code>vpetkov@raspi:/$ sudo mkdir /home/vpetkov\n\nWe trust you have received the usual lecture from the local System\nAdministrator. It usually boils down to these three things:\n\n    #1) Respect the privacy of others.\n    #2) Think before you type.\n    #3) With great power comes great responsibility.\n\n[sudo] password for vpetkov: \n</code></pre>\n<p>Change ownership:</p>\n<pre><code>vpetkov@raspi:/$ sudo chown vpetkov:vpetkov /home/vpetkov\n</code></pre>\n<p>When we reconnect, our current working directory is now the proper use home directory.</p>\n<h4 id=\"simplifyingsshaccess\">Simplifying SSH Access</h4>\n<p>Before we start using the Raspberry system regularly, let's make that as easy as possible. First, we need to modify our SSH client config, so we don't need to type the full IP address all the time (alternatively, this can also be done with a DHCP configuration for the name of the raspberry if your router allows it).</p>\n<p>If don't have an SSH client configuration file, create one in your SSH directory:</p>\n<pre><code>venelin@clevo ~ $ touch ~/.ssh/config\n</code></pre>\n<p>Inside it we only need to specify an alias for the IP and which user we want to login as:</p>\n<pre><code>nano ~/.ssh/config\n</code></pre>\n<p>My file contains this example configuration, based on the tutorial:</p>\n<pre><code>Host raspi\n    HostName 192.168.0.100\n    User vpetkov\n</code></pre>\n<p>Now it is sufficient to type</p>\n<pre><code>venelin@clevo ~ $ ssh raspi\n</code></pre>\n<p>to connect to the Raspberry.</p>\n<h4 id=\"settingupsshkeys\">Setting up SSH Keys</h4>\n<p>Using a password to connect to remote systems is not only more cumbersome, but also more risky, compared to using SSH keys. Let's set up the keys.</p>\n<p>First, generate the SSH key with:</p>\n<pre><code>venelin@clevo ~ $ ssh-keygen -t rsa\nGenerating public/private rsa key pair.\nEnter file in which to save the key (/home/venelin/.ssh/id_rsa): /home/venelin/.ssh/id_rsa_raspi3\nEnter passphrase (empty for no passphrase): \nEnter same passphrase again: \nYour identification has been saved in /home/venelin/.ssh/id_rsa_raspi3.\nYour public key has been saved in /home/venelin/.ssh/id_rsa_raspi3.pub.\nThe key fingerprint is:\nca:ae:42:45:34:0a:7d:fb:3c:c0:ff:f3:c2:13:a3:bc venelin@clevo\nThe key's randomart image is:\n+---[RSA 2048]----+\n|.. .o            |\n| ...o.           |\n|  .+ .           |\n|    =            |\n|   . =  S        |\n|  .  .=.o        |\n| .   .o= o       |\n|  .  .o *        |\n|   ...E. =.      |\n+-----------------+\n</code></pre>\n<p>Notice that several files are created in your ~/.ssh directory:</p>\n<pre><code>venelin@clevo ~/.ssh $ ls -l\ntotal 32\n-rw-r--r-- 1 venelin venelin   55 Dec 18 16:42 config\n...\n-rw------- 1 venelin venelin 1766 Dec 18 16:46 id_rsa_raspi3\n-rw-r--r-- 1 venelin venelin  395 Dec 18 16:46 id_rsa_raspi3.pub\n</code></pre>\n<p>We need to copy the public key id_rsa_raspi3.pub to the Raspberry account. Fortunately, there is an easy command to do that and we don't even need to worry about chmod-ing the authorized_keys file anymore:</p>\n<pre><code>venelin@clevo ~ $ ssh-copy-id raspi\n/usr/bin/ssh-copy-id: INFO: attempting to log in with the new key(s), to filter out any that are already installed\n/usr/bin/ssh-copy-id: INFO: 3 key(s) remain to be installed -- if you are prompted now it is to install the new keys\nvpetkov@192.168.0.100's password: \n\nNumber of key(s) added: 3\n\nNow try logging into the machine, with:   &quot;ssh 'raspi'&quot;\nand check to make sure that only the key(s) you wanted were added.\n</code></pre>\n<p>Notice that all public keys are copied over. If you need a more targeted approach, remove the rest or copy the file manually.</p>\n<p>Now connecting to the Raspberry is as easy as typing</p>\n<pre><code>venelin@clevo ~ $ ssh raspi\n\nThe programs included with the Debian GNU/Linux system are free software;\nthe exact distribution terms for each program are described in the\nindividual files in /usr/share/doc/*/copyright.\n\nDebian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent\npermitted by applicable law.\nLast login: Sun Dec 18 15:51:37 2016 from 192.168.0.29\nvpetkov@raspi:~$ \n</code></pre>\n</div>","amp":"10","plaintext":"Booting Up\nWe can now install the SD card and make some additional configurations to allows\nus to start using the Raspberry. I am assuming that it will be connected via\nLAN. This is always the safest option. Wifi can be setup later.\n\n 1. The SD card is put faced down in the Raspberry. There should be only one way\n    to do that.\n 2. Power up the Raspberry.\n\nYou should see the green LED blinking. If only the read one is on, then there\nmight be some problem with the image on the SD card. It is also a good idea to\ncheck on the LAN port to see that the TX/RX lights are also active.\n\nConnecting to the Raspberry\nIn your home router, look for some menu like\n\nDHCP Client Devices\n\n\nIn my case, the entry looks like this:\n\nraspberrypi\tB8:27:EB:42:C4:23\t192.168.0.100\tEthernet(100Mbps)\tN/A\t*** STATIC IP ADDRESS **\n\n\nIf you have configured a static IP, this check might not be necessary, but I\nfind it useful anyway. We can also ping it to check the the connectivity is OK:\n\nvenelin@clevo ~ $ ping -c4 192.168.0.100\nPING 192.168.0.100 (192.168.0.100) 56(84) bytes of data.\n64 bytes from 192.168.0.100: icmp_seq=1 ttl=64 time=4.12 ms\n64 bytes from 192.168.0.100: icmp_seq=2 ttl=64 time=1.15 ms\n64 bytes from 192.168.0.100: icmp_seq=3 ttl=64 time=1.34 ms\n64 bytes from 192.168.0.100: icmp_seq=4 ttl=64 time=1.07 ms\n\n--- 192.168.0.100 ping statistics ---\n4 packets transmitted, 4 received, 0% packet loss, time 3004ms\nrtt min/avg/max/mdev = 1.075/1.924/4.120/1.271 ms\n\n\nWith the last check we can see if the SSH port is available:\n\nvenelin@clevo ~ $ telnet 192.168.0.100 22\nTrying 192.168.0.100...\nConnected to 192.168.0.100.\nEscape character is '^]'.\nSSH-2.0-OpenSSH_6.7p1 Raspbian-5+deb8u3\n^]\nProtocol mismatch.\nConnection closed by foreign host.\n\n\nWe can now connect to the Raspberry. Raspbian is shipped with a default\nsudo-enabled user called \"pi\":\n\n * Default Raspbian user: pi\n * Default Raspbian user password: raspbian\n\nLet's connect with that user and change the credentials:\n\nvenelin@clevo ~ $ ssh pi@192.168.0.100\nThe authenticity of host '192.168.0.100 (192.168.0.100)' can't be established.\nECDSA key fingerprint is bb:61:88:d9:2c:58:a5:57:10:3f:f8:ce:46:cc:0b:98.\nAre you sure you want to continue connecting (yes/no)? yes\nWarning: Permanently added '192.168.0.100' (ECDSA) to the list of known hosts.\npi@192.168.0.100's password: \n\nThe programs included with the Debian GNU/Linux system are free software;\nthe exact distribution terms for each program are described in the\nindividual files in /usr/share/doc/*/copyright.\n\nDebian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent\npermitted by applicable law.\n\nSSH is enabled and the default password for the 'pi' user has not been changed.\nThis is a security risk - please login as the 'pi' user and type 'passwd' to set a new password.\n\n\nSince pi has sudo rights, we need to immediately change this password.\n\npi@raspberrypi:~ $ passwd\nChanging password for pi.\n(current) UNIX password: \nEnter new UNIX password: \nRetype new UNIX password: \npasswd: password updated successfully\n\n\nChanging the Host Name\nShorter names are always better for frequent tasks, therefore I like to name my\nRaspberry \"raspi\". However, be careful with these steps or you might lose\nconnectivity and you might need to start all over again.\n\nFirst, check the name of the system:\n\npi@raspberrypi:~ $ hostname\nraspberrypi\n\n\nLet's change that:\n\npi@raspberrypi:~ $ sudo hostname -b raspi\npi@raspberrypi:~ $ hostname\nraspi\n\n\nThis is not the end of it, however. The original name is still contained in\nseveral configuration files. We can easily find them with a recursive grep:\n\npi@raspberrypi:~ $ sudo grep -lr \"raspberrypi\" /etc/*\nsudo: unable to resolve host raspi\n/etc/apt/sources.list.d/raspi.list\n/etc/hostname\n/etc/hosts\n/etc/ssh/ssh_host_dsa_key.pub\n/etc/ssh/ssh_host_key\n/etc/ssh/ssh_host_ed25519_key.pub\n/etc/ssh/ssh_host_key.pub\n/etc/ssh/ssh_host_rsa_key.pub\n/etc/ssh/ssh_host_ecdsa_key.pub\n\n\nParticularly worrisome are some SSH configuration files. If we blindly go about\nit, SSH will not work and we are locked out. First, however, we need to change\nthe network name. Replace the original name in /etc/hosts with \"raspi\" and\nreboot the system:\n\nnano /etc/hosts\n\n\nReboot:\n\nsudo reboot\n\n\nYou can see that the network host name is now changed if you try to ping it from\nwithin the system:\n\npi@raspberrypi:~ $ ping -c2 raspi\nPING raspi (127.0.1.1) 56(84) bytes of data.\n64 bytes from raspi (127.0.1.1): icmp_seq=1 ttl=64 time=0.109 ms\n64 bytes from raspi (127.0.1.1): icmp_seq=2 ttl=64 time=0.057 ms\n\n--- raspi ping statistics ---\n2 packets transmitted, 2 received, 0% packet loss, time 999ms\nrtt min/avg/max/mdev = 0.057/0.083/0.109/0.026 ms\n\n\nDespite the change of the network host name, you will notice that the Linux host\nname is still the old one. Change it in the hostname file:\n\nnano /etc/hostname\n\n\nNow we need to perform a delicate change on SSH. Please, make sure that you\ndon't disconnect from SSH until this is done.\n\nWe have seen that many SSH certificates are tied to the original name of the\nsystem. We need to delete and regenerate these.\n\nRemove the old SSH certificates:\n\npi@raspi:~ $ sudo rm /etc/ssh/ssh_host_*\n\n\nImmediately reconfigure the SSH server to regenerate the certificates:\n\npi@raspi:~ $ sudo dpkg-reconfigure openssh-server\nCreating SSH2 RSA key; this may take some time ...\n2048 6a:3a:d8:1d:c7:51:61:ca:a4:f5:bc:f0:9b:b0:fd:73 /etc/ssh/ssh_host_rsa_key.pub (RSA)\nCreating SSH2 DSA key; this may take some time ...\n1024 82:7a:cb:1d:65:63:5b:96:64:b8:83:be:a5:42:b8:b1 /etc/ssh/ssh_host_dsa_key.pub (DSA)\nCreating SSH2 ECDSA key; this may take some time ...\n256 b8:04:9d:e0:6e:52:cc:d2:f4:52:c9:ad:76:5a:e4:35 /etc/ssh/ssh_host_ecdsa_key.pub (ECDSA)\nCreating SSH2 ED25519 key; this may take some time ...\n256 e1:2f:19:b7:b2:d8:14:87:63:b9:e1:26:5c:97:58:03 /etc/ssh/ssh_host_ed25519_key.pub (ED25519)\n\n\nRestart SSH:\n\npi@raspi:~ $ sudo service ssh restart\n\n\nreboot the system:\n\npi@raspi:~ $ sudo reboot\n\n\nIf you try to connect now, you will notice that there is an error recognizing\nthe SSH fingerprint. I usually fix this by removing the last entry in the\nknown_hosts of my laptop's SSH directory:\n\nvenelin@clevo ~ $ emacs ~/.ssh/known_hosts\n\n\nAfter connecting\n\nvenelin@clevo ~ $ ssh pi@192.168.0.100\nThe authenticity of host '192.168.0.100 (192.168.0.100)' can't be established.\nECDSA key fingerprint is 73:b4:f5:c4:7a:c7:65:83:5b:6e:b4:3d:02:d4:78:f3.\nAre you sure you want to continue connecting (yes/no)? yes\nWarning: Permanently added '192.168.0.100' (ECDSA) to the list of known hosts.\npi@192.168.0.100's password: \n\nThe programs included with the Debian GNU/Linux system are free software;\nthe exact distribution terms for each program are described in the\nindividual files in /usr/share/doc/*/copyright.\n\nDebian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent\npermitted by applicable law.\nLast login: Sun Dec 18 15:12:17 2016 from 192.168.0.29\n\n\nyou will notice that the system is now properly named:\n\npi@raspi:~ $ hostname\nraspi\n\n\nThis should do it.\n\nAdding a Custom User\nThe first thing I like to do on the new system is to add my own user\n\npi@raspberrypi:~ $ sudo useradd -G sudo vpetkov\n\n\nSet the password for the new user\n\npi@raspberrypi:~ $ sudo passwd vpetkov\nEnter new UNIX password: \nRetype new UNIX password: \npasswd: password updated successfully\n\n\nWe can see that user \"pi\" is added by default to many additional group that\nenable access to some hardware features:\n\npi@raspberrypi:~ $ id\nuid=1000(pi) gid=1000(pi) groups=1000(pi),4(adm),20(dialout),24(cdrom),27(sudo),29(audio),44(video),46(plugdev),60(games),100(users),101(input),108(netdev),997(gpio),998(i2c),999(spi)\n\n\nLet's add the newly created user to these groups\n\nsudo usermod -a -G adm vpetkov\nsudo usermod -a -G dialout vpetkov\nsudo usermod -a -G audio vpetkov\nsudo usermod -a -G video vpetkov\nsudo usermod -a -G plugdev vpetkov\nsudo usermod -a -G input vpetkov\nsudo usermod -a -G netdev vpetkov\nsudo usermod -a -G gpio vpetkov\nsudo usermod -a -G i2c vpetkov\nsudo usermod -a -G spi vpetkov\n\n\nWe should have more or less set up our custom user by now.\n\npi@raspberrypi:~ $ sudo su vpetkov\nvpetkov@raspberrypi:/home/pi$ id\nuid=1001(vpetkov) gid=1001(vpetkov) groups=1001(vpetkov),4(adm),20(dialout),27(sudo),29(audio),44(video),46(plugdev),101(input),108(netdev),997(gpio),998(i2c),999(spi)\n\n\nWe can not reconnect with the user we want to use:\n\nvenelin@clevo ~ $ ssh vpetkov@192.168.0.100\nvpetkov@192.168.0.100's password: \n\nThe programs included with the Debian GNU/Linux system are free software;\nthe exact distribution terms for each program are described in the\nindividual files in /usr/share/doc/*/copyright.\n\nDebian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent\npermitted by applicable law.\nCould not chdir to home directory /home/vpetkov: No such file or directory\n\n\nNotice that the home directory is missing. Let's rectify that:\n\nvpetkov@raspi:/$ sudo mkdir /home/vpetkov\n\nWe trust you have received the usual lecture from the local System\nAdministrator. It usually boils down to these three things:\n\n    #1) Respect the privacy of others.\n    #2) Think before you type.\n    #3) With great power comes great responsibility.\n\n[sudo] password for vpetkov: \n\n\nChange ownership:\n\nvpetkov@raspi:/$ sudo chown vpetkov:vpetkov /home/vpetkov\n\n\nWhen we reconnect, our current working directory is now the proper use home\ndirectory.\n\nSimplifying SSH Access\nBefore we start using the Raspberry system regularly, let's make that as easy as\npossible. First, we need to modify our SSH client config, so we don't need to\ntype the full IP address all the time (alternatively, this can also be done with\na DHCP configuration for the name of the raspberry if your router allows it).\n\nIf don't have an SSH client configuration file, create one in your SSH\ndirectory:\n\nvenelin@clevo ~ $ touch ~/.ssh/config\n\n\nInside it we only need to specify an alias for the IP and which user we want to\nlogin as:\n\nnano ~/.ssh/config\n\n\nMy file contains this example configuration, based on the tutorial:\n\nHost raspi\n    HostName 192.168.0.100\n    User vpetkov\n\n\nNow it is sufficient to type\n\nvenelin@clevo ~ $ ssh raspi\n\n\nto connect to the Raspberry.\n\nSetting up SSH Keys\nUsing a password to connect to remote systems is not only more cumbersome, but\nalso more risky, compared to using SSH keys. Let's set up the keys.\n\nFirst, generate the SSH key with:\n\nvenelin@clevo ~ $ ssh-keygen -t rsa\nGenerating public/private rsa key pair.\nEnter file in which to save the key (/home/venelin/.ssh/id_rsa): /home/venelin/.ssh/id_rsa_raspi3\nEnter passphrase (empty for no passphrase): \nEnter same passphrase again: \nYour identification has been saved in /home/venelin/.ssh/id_rsa_raspi3.\nYour public key has been saved in /home/venelin/.ssh/id_rsa_raspi3.pub.\nThe key fingerprint is:\nca:ae:42:45:34:0a:7d:fb:3c:c0:ff:f3:c2:13:a3:bc venelin@clevo\nThe key's randomart image is:\n+---[RSA 2048]----+\n|.. .o            |\n| ...o.           |\n|  .+ .           |\n|    =            |\n|   . =  S        |\n|  .  .=.o        |\n| .   .o= o       |\n|  .  .o *        |\n|   ...E. =.      |\n+-----------------+\n\n\nNotice that several files are created in your ~/.ssh directory:\n\nvenelin@clevo ~/.ssh $ ls -l\ntotal 32\n-rw-r--r-- 1 venelin venelin   55 Dec 18 16:42 config\n...\n-rw------- 1 venelin venelin 1766 Dec 18 16:46 id_rsa_raspi3\n-rw-r--r-- 1 venelin venelin  395 Dec 18 16:46 id_rsa_raspi3.pub\n\n\nWe need to copy the public key id_rsa_raspi3.pub to the Raspberry account.\nFortunately, there is an easy command to do that and we don't even need to worry\nabout chmod-ing the authorized_keys file anymore:\n\nvenelin@clevo ~ $ ssh-copy-id raspi\n/usr/bin/ssh-copy-id: INFO: attempting to log in with the new key(s), to filter out any that are already installed\n/usr/bin/ssh-copy-id: INFO: 3 key(s) remain to be installed -- if you are prompted now it is to install the new keys\nvpetkov@192.168.0.100's password: \n\nNumber of key(s) added: 3\n\nNow try logging into the machine, with:   \"ssh 'raspi'\"\nand check to make sure that only the key(s) you wanted were added.\n\n\nNotice that all public keys are copied over. If you need a more targeted\napproach, remove the rest or copy the file manually.\n\nNow connecting to the Raspberry is as easy as typing\n\nvenelin@clevo ~ $ ssh raspi\n\nThe programs included with the Debian GNU/Linux system are free software;\nthe exact distribution terms for each program are described in the\nindividual files in /usr/share/doc/*/copyright.\n\nDebian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent\npermitted by applicable law.\nLast login: Sun Dec 18 15:51:37 2016 from 192.168.0.29\nvpetkov@raspi:~$","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2016-12-18 12:49:59","created_by":"1","updated_at":"2017-12-22 12:11:27","updated_by":"1","published_at":"2016-12-18 16:21:07","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null},{"id":"5a11dc914a0fc713dc689fb4","uuid":"141944b3-ba02-40ca-a24c-eae5d7fba28d","title":"Raspberry Pi 3 Software Install","slug":"raspberry-pi-3-software-install","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"#### Preliminary Configuration\\n\\nFirst, let's update the system:\\n\\n```\\nvpetkov@raspi:~$ sudo apt-get update\\n```\\nand upgrade any available packages\\n```\\nvpetkov@raspi:~$ sudo apt-get upgrade\\n```\\n#### Useful Software Packages\\nFirst, let's install a familiar text editor. This goes a little bit against the minimalist concept, but since I am also using the Raspberry for development, it is actually useful to have something like that here. You are free to choose your tools, of course.\\n```\\nsudo apt-get install emacs\\n```\\nA mandatory package is Git\\n```\\nsudo apt-get install -y git\\n```\\nIf you plan to program Arduino from the Raspberry Pi on the command line, then one very useful tool is the Python serial library.\\n```\\nsudo apt-get install -y python-serial\\n```\\nI like to use a terminal multiplexer to run long-running processes that I haven't daemonized yet:\\n```\\nsudo apt-get install -y tmux\\n```\\nA useful resource monitoring tool is a modern version of top:\\n```\\nsudo apt-get install htop\\n```\\nOne of the most important commands is gpio utility of the wiringpi library. It can be used directly to turn on/off gpio pins and also to show their state.\\n\\n```\\nsudo apt-get install wiringpi\\n```\\nExample test command\\n\\n```\\nvpetkov@raspi:~$ gpio readall\\n +-----+-----+---------+------+---+---Pi 3---+---+------+---------+-----+-----+\\n | BCM | wPi |   Name  | Mode | V | Physical | V | Mode | Name    | wPi | BCM |\\n +-----+-----+---------+------+---+----++----+---+------+---------+-----+-----+\\n |     |     |    3.3v |      |   |  1 || 2  |   |      | 5v      |     |     |\\n |   2 |   8 |   SDA.1 | ALT0 | 1 |  3 || 4  |   |      | 5V      |     |     |\\n |   3 |   9 |   SCL.1 | ALT0 | 1 |  5 || 6  |   |      | 0v      |     |     |\\n |   4 |   7 | GPIO. 7 |   IN | 1 |  7 || 8  | 0 | IN   | TxD     | 15  | 14  |\\n |     |     |      0v |      |   |  9 || 10 | 1 | IN   | RxD     | 16  | 15  |\\n |  17 |   0 | GPIO. 0 |   IN | 0 | 11 || 12 | 0 | IN   | GPIO. 1 | 1   | 18  |\\n |  27 |   2 | GPIO. 2 |   IN | 0 | 13 || 14 |   |      | 0v      |     |     |\\n |  22 |   3 | GPIO. 3 |   IN | 0 | 15 || 16 | 0 | IN   | GPIO. 4 | 4   | 23  |\\n |     |     |    3.3v |      |   | 17 || 18 | 0 | IN   | GPIO. 5 | 5   | 24  |\\n |  10 |  12 |    MOSI | ALT0 | 0 | 19 || 20 |   |      | 0v      |     |     |\\n |   9 |  13 |    MISO | ALT0 | 0 | 21 || 22 | 0 | IN   | GPIO. 6 | 6   | 25  |\\n |  11 |  14 |    SCLK | ALT0 | 0 | 23 || 24 | 1 | OUT  | CE0     | 10  | 8   |\\n |     |     |      0v |      |   | 25 || 26 | 1 | OUT  | CE1     | 11  | 7   |\\n |   0 |  30 |   SDA.0 |   IN | 1 | 27 || 28 | 1 | IN   | SCL.0   | 31  | 1   |\\n |   5 |  21 | GPIO.21 |   IN | 1 | 29 || 30 |   |      | 0v      |     |     |\\n |   6 |  22 | GPIO.22 |   IN | 1 | 31 || 32 | 0 | IN   | GPIO.26 | 26  | 12  |\\n |  13 |  23 | GPIO.23 |   IN | 0 | 33 || 34 |   |      | 0v      |     |     |\\n |  19 |  24 | GPIO.24 |   IN | 0 | 35 || 36 | 0 | IN   | GPIO.27 | 27  | 16  |\\n |  26 |  25 | GPIO.25 |   IN | 0 | 37 || 38 | 0 | IN   | GPIO.28 | 28  | 20  |\\n |     |     |      0v |      |   | 39 || 40 | 0 | IN   | GPIO.29 | 29  | 21  |\\n +-----+-----+---------+------+---+----++----+---+------+---------+-----+-----+\\n | BCM | wPi |   Name  | Mode | V | Physical | V | Mode | Name    | wPi | BCM |\\n +-----+-----+---------+------+---+---Pi 3---+---+------+---------+-----+-----+\\n\\n```\\n\\n#### Enable Some Kernel Features\\n\\nIf you want to connect some devices directly to the Raspberry, you might need to use a couple of additional features, so you can optionally enable them with the \\n```\\nsudo raspi-config\\n```\\ntool.\\n\\nMore specifically, these are interfaces that allow you to program microcontrollers and connect some devices over i2c:\\n\\n* Enable SPI interface\\n* Enable i2c interface\\n\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><h4 id=\"preliminaryconfiguration\">Preliminary Configuration</h4>\n<p>First, let's update the system:</p>\n<pre><code>vpetkov@raspi:~$ sudo apt-get update\n</code></pre>\n<p>and upgrade any available packages</p>\n<pre><code>vpetkov@raspi:~$ sudo apt-get upgrade\n</code></pre>\n<h4 id=\"usefulsoftwarepackages\">Useful Software Packages</h4>\n<p>First, let's install a familiar text editor. This goes a little bit against the minimalist concept, but since I am also using the Raspberry for development, it is actually useful to have something like that here. You are free to choose your tools, of course.</p>\n<pre><code>sudo apt-get install emacs\n</code></pre>\n<p>A mandatory package is Git</p>\n<pre><code>sudo apt-get install -y git\n</code></pre>\n<p>If you plan to program Arduino from the Raspberry Pi on the command line, then one very useful tool is the Python serial library.</p>\n<pre><code>sudo apt-get install -y python-serial\n</code></pre>\n<p>I like to use a terminal multiplexer to run long-running processes that I haven't daemonized yet:</p>\n<pre><code>sudo apt-get install -y tmux\n</code></pre>\n<p>A useful resource monitoring tool is a modern version of top:</p>\n<pre><code>sudo apt-get install htop\n</code></pre>\n<p>One of the most important commands is gpio utility of the wiringpi library. It can be used directly to turn on/off gpio pins and also to show their state.</p>\n<pre><code>sudo apt-get install wiringpi\n</code></pre>\n<p>Example test command</p>\n<pre><code>vpetkov@raspi:~$ gpio readall\n +-----+-----+---------+------+---+---Pi 3---+---+------+---------+-----+-----+\n | BCM | wPi |   Name  | Mode | V | Physical | V | Mode | Name    | wPi | BCM |\n +-----+-----+---------+------+---+----++----+---+------+---------+-----+-----+\n |     |     |    3.3v |      |   |  1 || 2  |   |      | 5v      |     |     |\n |   2 |   8 |   SDA.1 | ALT0 | 1 |  3 || 4  |   |      | 5V      |     |     |\n |   3 |   9 |   SCL.1 | ALT0 | 1 |  5 || 6  |   |      | 0v      |     |     |\n |   4 |   7 | GPIO. 7 |   IN | 1 |  7 || 8  | 0 | IN   | TxD     | 15  | 14  |\n |     |     |      0v |      |   |  9 || 10 | 1 | IN   | RxD     | 16  | 15  |\n |  17 |   0 | GPIO. 0 |   IN | 0 | 11 || 12 | 0 | IN   | GPIO. 1 | 1   | 18  |\n |  27 |   2 | GPIO. 2 |   IN | 0 | 13 || 14 |   |      | 0v      |     |     |\n |  22 |   3 | GPIO. 3 |   IN | 0 | 15 || 16 | 0 | IN   | GPIO. 4 | 4   | 23  |\n |     |     |    3.3v |      |   | 17 || 18 | 0 | IN   | GPIO. 5 | 5   | 24  |\n |  10 |  12 |    MOSI | ALT0 | 0 | 19 || 20 |   |      | 0v      |     |     |\n |   9 |  13 |    MISO | ALT0 | 0 | 21 || 22 | 0 | IN   | GPIO. 6 | 6   | 25  |\n |  11 |  14 |    SCLK | ALT0 | 0 | 23 || 24 | 1 | OUT  | CE0     | 10  | 8   |\n |     |     |      0v |      |   | 25 || 26 | 1 | OUT  | CE1     | 11  | 7   |\n |   0 |  30 |   SDA.0 |   IN | 1 | 27 || 28 | 1 | IN   | SCL.0   | 31  | 1   |\n |   5 |  21 | GPIO.21 |   IN | 1 | 29 || 30 |   |      | 0v      |     |     |\n |   6 |  22 | GPIO.22 |   IN | 1 | 31 || 32 | 0 | IN   | GPIO.26 | 26  | 12  |\n |  13 |  23 | GPIO.23 |   IN | 0 | 33 || 34 |   |      | 0v      |     |     |\n |  19 |  24 | GPIO.24 |   IN | 0 | 35 || 36 | 0 | IN   | GPIO.27 | 27  | 16  |\n |  26 |  25 | GPIO.25 |   IN | 0 | 37 || 38 | 0 | IN   | GPIO.28 | 28  | 20  |\n |     |     |      0v |      |   | 39 || 40 | 0 | IN   | GPIO.29 | 29  | 21  |\n +-----+-----+---------+------+---+----++----+---+------+---------+-----+-----+\n | BCM | wPi |   Name  | Mode | V | Physical | V | Mode | Name    | wPi | BCM |\n +-----+-----+---------+------+---+---Pi 3---+---+------+---------+-----+-----+\n\n</code></pre>\n<h4 id=\"enablesomekernelfeatures\">Enable Some Kernel Features</h4>\n<p>If you want to connect some devices directly to the Raspberry, you might need to use a couple of additional features, so you can optionally enable them with the</p>\n<pre><code>sudo raspi-config\n</code></pre>\n<p>tool.</p>\n<p>More specifically, these are interfaces that allow you to program microcontrollers and connect some devices over i2c:</p>\n<ul>\n<li>Enable SPI interface</li>\n<li>Enable i2c interface</li>\n</ul>\n</div>","amp":"11","plaintext":"Preliminary Configuration\nFirst, let's update the system:\n\nvpetkov@raspi:~$ sudo apt-get update\n\n\nand upgrade any available packages\n\nvpetkov@raspi:~$ sudo apt-get upgrade\n\n\nUseful Software Packages\nFirst, let's install a familiar text editor. This goes a little bit against the\nminimalist concept, but since I am also using the Raspberry for development, it\nis actually useful to have something like that here. You are free to choose your\ntools, of course.\n\nsudo apt-get install emacs\n\n\nA mandatory package is Git\n\nsudo apt-get install -y git\n\n\nIf you plan to program Arduino from the Raspberry Pi on the command line, then\none very useful tool is the Python serial library.\n\nsudo apt-get install -y python-serial\n\n\nI like to use a terminal multiplexer to run long-running processes that I\nhaven't daemonized yet:\n\nsudo apt-get install -y tmux\n\n\nA useful resource monitoring tool is a modern version of top:\n\nsudo apt-get install htop\n\n\nOne of the most important commands is gpio utility of the wiringpi library. It\ncan be used directly to turn on/off gpio pins and also to show their state.\n\nsudo apt-get install wiringpi\n\n\nExample test command\n\nvpetkov@raspi:~$ gpio readall\n +-----+-----+---------+------+---+---Pi 3---+---+------+---------+-----+-----+\n | BCM | wPi |   Name  | Mode | V | Physical | V | Mode | Name    | wPi | BCM |\n +-----+-----+---------+------+---+----++----+---+------+---------+-----+-----+\n |     |     |    3.3v |      |   |  1 || 2  |   |      | 5v      |     |     |\n |   2 |   8 |   SDA.1 | ALT0 | 1 |  3 || 4  |   |      | 5V      |     |     |\n |   3 |   9 |   SCL.1 | ALT0 | 1 |  5 || 6  |   |      | 0v      |     |     |\n |   4 |   7 | GPIO. 7 |   IN | 1 |  7 || 8  | 0 | IN   | TxD     | 15  | 14  |\n |     |     |      0v |      |   |  9 || 10 | 1 | IN   | RxD     | 16  | 15  |\n |  17 |   0 | GPIO. 0 |   IN | 0 | 11 || 12 | 0 | IN   | GPIO. 1 | 1   | 18  |\n |  27 |   2 | GPIO. 2 |   IN | 0 | 13 || 14 |   |      | 0v      |     |     |\n |  22 |   3 | GPIO. 3 |   IN | 0 | 15 || 16 | 0 | IN   | GPIO. 4 | 4   | 23  |\n |     |     |    3.3v |      |   | 17 || 18 | 0 | IN   | GPIO. 5 | 5   | 24  |\n |  10 |  12 |    MOSI | ALT0 | 0 | 19 || 20 |   |      | 0v      |     |     |\n |   9 |  13 |    MISO | ALT0 | 0 | 21 || 22 | 0 | IN   | GPIO. 6 | 6   | 25  |\n |  11 |  14 |    SCLK | ALT0 | 0 | 23 || 24 | 1 | OUT  | CE0     | 10  | 8   |\n |     |     |      0v |      |   | 25 || 26 | 1 | OUT  | CE1     | 11  | 7   |\n |   0 |  30 |   SDA.0 |   IN | 1 | 27 || 28 | 1 | IN   | SCL.0   | 31  | 1   |\n |   5 |  21 | GPIO.21 |   IN | 1 | 29 || 30 |   |      | 0v      |     |     |\n |   6 |  22 | GPIO.22 |   IN | 1 | 31 || 32 | 0 | IN   | GPIO.26 | 26  | 12  |\n |  13 |  23 | GPIO.23 |   IN | 0 | 33 || 34 |   |      | 0v      |     |     |\n |  19 |  24 | GPIO.24 |   IN | 0 | 35 || 36 | 0 | IN   | GPIO.27 | 27  | 16  |\n |  26 |  25 | GPIO.25 |   IN | 0 | 37 || 38 | 0 | IN   | GPIO.28 | 28  | 20  |\n |     |     |      0v |      |   | 39 || 40 | 0 | IN   | GPIO.29 | 29  | 21  |\n +-----+-----+---------+------+---+----++----+---+------+---------+-----+-----+\n | BCM | wPi |   Name  | Mode | V | Physical | V | Mode | Name    | wPi | BCM |\n +-----+-----+---------+------+---+---Pi 3---+---+------+---------+-----+-----+\n\n\n\nEnable Some Kernel Features\nIf you want to connect some devices directly to the Raspberry, you might need to\nuse a couple of additional features, so you can optionally enable them with the\n\nsudo raspi-config\n\n\ntool.\n\nMore specifically, these are interfaces that allow you to program\nmicrocontrollers and connect some devices over i2c:\n\n * Enable SPI interface\n * Enable i2c interface","feature_image":null,"featured":0,"page":1,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2016-12-18 16:27:55","created_by":"1","updated_at":"2016-12-18 18:05:56","updated_by":"1","published_at":"2016-12-18 17:18:43","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null},{"id":"5a11dc914a0fc713dc689fb5","uuid":"912a80b5-b1f4-41a6-a555-c06101960b57","title":"Installing Arduino on Raspberry Pi 3","slug":"installing-arduino-on-raspberry-pi-3","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"#### Overview\\nThis guide will show how to install the latest Arduino IDE and supporting packages to enable the programming of Arduino devices from the Raspberry Pi 3.\\n\\nYou will need a USB to Serial FTDI converter in order to program the Arduino devices and to receive the output of the serial console when testing them.\\n\\nThe complete setup allows us to develop and program Arduino devices on the command line, without any IDE. We are going to use up-to-date versions of the software, so most of the packages will have to be fetched from Github and installed locally.\\n\\n#### Preliminary Steps\\n\\nFirst, let's organize the locally installed packages on the Raspberry. I like to use a directory called \\\"local\\\" for this purpose. Since there are no other users, it makes no sense to install anything in system directories. We will place them in ~/local:\\n\\n```\\nmkdir ~/local\\ncd local\\n```\\n\\n#### Arduino IDE\\n\\nBecause of some compatibility issues, I prefer to install an up-to-date version of the Arduino IDE. The official Debian package is just too old and not compatible anymore with newer libraries.\\n\\nDownload to the website https://www.arduino.cc/en/Main/Software. Make sure that you select the Linux ARM (experimental) version. The AMD64 architecture doesn't work on the Raspberry. The current version is \\n```\\nARDUINO 1.6.13\\n```\\nDownload the package and move it to the Raspberry with something like:\\n```\\nscp arduino-1.6.13-linuxarm.tar.xz raspi:local\\n```\\nThe package can be decompressed inside the ~/local directory using:\\n```\\ncd ~/local\\ntar -xf arduino-1.6.13-linuxarm.tar.xz\\n```\\nNow we have the Arduino IDE installed under\\n```\\n~/local/arduino-1.6.13\\n```\\nIt contains libraries, board description files, etc.\\n\\nWe can not compile the source files (Arduino sketches) with a plain old Make file, because there are many dependencies and hidden parts from the developer. Therefore, we need Arduino.mk which enables us to work on the command line. It lives on Github, so we just need to clone it to the ~/local directory:\\n\\n```\\nvpetkov@raspi:~$ git clone https://github.com/sudar/Arduino-Makefile ~/local/arduino_mk\\nCloning into '/home/vpetkov/local/arduino_mk'...\\nremote: Counting objects: 2483, done.\\nremote: Total 2483 (delta 0), reused 0 (delta 0), pack-reused 2483\\nReceiving objects: 100% (2483/2483), 1.48 MiB | 522.00 KiB/s, done.\\nResolving deltas: 100% (1097/1097), done.\\nChecking connectivity... done.\\n```\\nNow we are set up to make a first test.\\n\\n#### Test Arduino Installation\\nFirst, create a directory that contains the code:\\n```\\nmkdir ~/test\\n```\\nWe need a Makefile and an *.ino file. Let's create these:\\n```\\ncd ~/test\\ntouch Makefile\\ntouch Test.ino\\n```\\nNow, please keep in mind that the programming test requires the following devices:\\n\\n1. A USB to Serial FTDI adapter\\n2. Arduino Pro Mini 3.3v\\n\\nThe Makefile is tailored for this particular device. If you have another, the hardware-specific parts have to be updated.\\n\\nMakefile:\\n```\\nBOARD_TAG=pro328\\nMCU=atmega328\\nMONITOR_PORT=/dev/ttyUSB0\\nARDUINO_DIR = /home/$(shell whoami)/local/arduino-1.6.13\\nARDMK_DIR = /home/$(shell whoami)/local/arduino_mk\\nUSER_LIB_PATH=/home/$(shell whoami)/local/lib\\nBOARD_TAG = pro\\nBOARD_SUB = ATmega328\\nMCU = atmega328p\\nF_CPU=8000000L\\nAVRDUDE_ARD_BAUDRATE = 57600\\ninclude $(ARDMK_DIR)/Arduino.mk\\n```\\n\\nThe source code is also very simple:\\n\\nTest.ino:\\n```\\nvoid setup(){\\n  Serial.begin(9600);\\n  Serial.println(\\\"Arduino on Raspberry Pi Test\\\");\\n}\\nvoid loop(){\\n  delay(2000);\\n  Serial.println(\\\"Still there\\\");\\n  Serial.print(\\\"\\\\n\\\");\\n}\\n```\\n\\nSimply compile with \\\"make\\\". All tools are contained in the Arduino IDE and all configuration in the Makefile:\\n\\n```\\nmake\\n```\\n\\nThe program should now be compiled successfully.\\n\\nWhen you connect the FTDI converter, make sure that it appears as /tty/USB0. This can be checked with dmesg:\\n\\n```\\nvpetkov@raspi:~/test$ dmesg | tail\\n[ 8864.644767] usb 1-1.4: Product: CP2102 USB to UART Bridge Controller\\n[ 8864.644780] usb 1-1.4: Manufacturer: Silicon Labs\\n[ 8864.644792] usb 1-1.4: SerialNumber: 0001\\n[ 8865.808457] usbcore: registered new interface driver usbserial\\n[ 8865.808562] usbcore: registered new interface driver usbserial_generic\\n[ 8865.808649] usbserial: USB Serial support registered for generic\\n[ 8865.812262] usbcore: registered new interface driver cp210x\\n[ 8865.812395] usbserial: USB Serial support registered for cp210x\\n[ 8865.812559] cp210x 1-1.4:1.0: cp210x converter detected\\n[ 8865.813036] usb 1-1.4: cp210x converter now attached to ttyUSB0\\n```\\nWe can now program the Arduino. Make sure that you have correctly connected the RX/TX and the reset pins, as well as the Vcc/Ground. You need the 100nF capacitor on the reset line, for it to work correctly.\\n\\nPlease, also make sure that the Python python-serial package is installed, since it is used by Arduino.mk:\\n\\n```\\nmake upload\\n```\\nIf sucessful, you should see something like:\\n```\\n/home/vpetkov/local/arduino-1.6.13/hardware/tools/avr/bin/avrdude -q -V -p atmega328p -C /home/vpetkov/local/arduino-1.6.13/hardware/tools/avr/etc/avrdude.conf -D -c arduino -b 57600 -P /dev/ttyUSB0 \\\\\\n\\t\\t-U flash:w:build-pro-ATmega328/test.hex:i\\n\\navrdude: AVR device initialized and ready to accept instructions\\navrdude: Device signature = 0x1e950f (probably m328p)\\navrdude: reading input file \\\"build-pro-ATmega328/test.hex\\\"\\navrdude: writing flash (1668 bytes):\\navrdude: 1668 bytes of flash written\\n\\navrdude: safemode: Fuses OK (E:00, H:00, L:00)\\n\\navrdude done.  Thank you.\\n\\nmake[1]: Leaving directory '/home/vpetkov/test'\\n```\\n\\nNow we can test the message that the Arduino sends to us. I like to use a python command to monitor the serial port:\\n\\n```\\npython -m serial.tools.miniterm -p /dev/ttyUSB0 -b 9600\\n```\\n\\nYou should see period messages like:\\n\\n```\\nStill there\\n```\\n\\nPress Ctrl and ] to exit.\\n\\n#### User Libraries\\n\\nYou might have noticed the line \\n\\n```\\nUSER_LIB_PATH=/home/$(shell whoami)/local/lib\\n```\\n\\nThis is where I put my user libraries. For instance, my temperature/humidity sensor uses the DHT library:\\n\\n```\\ngit clone https://github.com/adafruit/DHT-sensor-library ~/local/lib/DHT\\n```\\nAlso, I use MySensors for the wireless network:\\n\\n```\\ngit clone https://github.com/mysensors/MySensors ~/local/mysensors\\n```\\n\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><h4 id=\"overview\">Overview</h4>\n<p>This guide will show how to install the latest Arduino IDE and supporting packages to enable the programming of Arduino devices from the Raspberry Pi 3.</p>\n<p>You will need a USB to Serial FTDI converter in order to program the Arduino devices and to receive the output of the serial console when testing them.</p>\n<p>The complete setup allows us to develop and program Arduino devices on the command line, without any IDE. We are going to use up-to-date versions of the software, so most of the packages will have to be fetched from Github and installed locally.</p>\n<h4 id=\"preliminarysteps\">Preliminary Steps</h4>\n<p>First, let's organize the locally installed packages on the Raspberry. I like to use a directory called &quot;local&quot; for this purpose. Since there are no other users, it makes no sense to install anything in system directories. We will place them in ~/local:</p>\n<pre><code>mkdir ~/local\ncd local\n</code></pre>\n<h4 id=\"arduinoide\">Arduino IDE</h4>\n<p>Because of some compatibility issues, I prefer to install an up-to-date version of the Arduino IDE. The official Debian package is just too old and not compatible anymore with newer libraries.</p>\n<p>Download to the website <a href=\"https://www.arduino.cc/en/Main/Software\">https://www.arduino.cc/en/Main/Software</a>. Make sure that you select the Linux ARM (experimental) version. The AMD64 architecture doesn't work on the Raspberry. The current version is</p>\n<pre><code>ARDUINO 1.6.13\n</code></pre>\n<p>Download the package and move it to the Raspberry with something like:</p>\n<pre><code>scp arduino-1.6.13-linuxarm.tar.xz raspi:local\n</code></pre>\n<p>The package can be decompressed inside the ~/local directory using:</p>\n<pre><code>cd ~/local\ntar -xf arduino-1.6.13-linuxarm.tar.xz\n</code></pre>\n<p>Now we have the Arduino IDE installed under</p>\n<pre><code>~/local/arduino-1.6.13\n</code></pre>\n<p>It contains libraries, board description files, etc.</p>\n<p>We can not compile the source files (Arduino sketches) with a plain old Make file, because there are many dependencies and hidden parts from the developer. Therefore, we need Arduino.mk which enables us to work on the command line. It lives on Github, so we just need to clone it to the ~/local directory:</p>\n<pre><code>vpetkov@raspi:~$ git clone https://github.com/sudar/Arduino-Makefile ~/local/arduino_mk\nCloning into '/home/vpetkov/local/arduino_mk'...\nremote: Counting objects: 2483, done.\nremote: Total 2483 (delta 0), reused 0 (delta 0), pack-reused 2483\nReceiving objects: 100% (2483/2483), 1.48 MiB | 522.00 KiB/s, done.\nResolving deltas: 100% (1097/1097), done.\nChecking connectivity... done.\n</code></pre>\n<p>Now we are set up to make a first test.</p>\n<h4 id=\"testarduinoinstallation\">Test Arduino Installation</h4>\n<p>First, create a directory that contains the code:</p>\n<pre><code>mkdir ~/test\n</code></pre>\n<p>We need a Makefile and an *.ino file. Let's create these:</p>\n<pre><code>cd ~/test\ntouch Makefile\ntouch Test.ino\n</code></pre>\n<p>Now, please keep in mind that the programming test requires the following devices:</p>\n<ol>\n<li>A USB to Serial FTDI adapter</li>\n<li>Arduino Pro Mini 3.3v</li>\n</ol>\n<p>The Makefile is tailored for this particular device. If you have another, the hardware-specific parts have to be updated.</p>\n<p>Makefile:</p>\n<pre><code>BOARD_TAG=pro328\nMCU=atmega328\nMONITOR_PORT=/dev/ttyUSB0\nARDUINO_DIR = /home/$(shell whoami)/local/arduino-1.6.13\nARDMK_DIR = /home/$(shell whoami)/local/arduino_mk\nUSER_LIB_PATH=/home/$(shell whoami)/local/lib\nBOARD_TAG = pro\nBOARD_SUB = ATmega328\nMCU = atmega328p\nF_CPU=8000000L\nAVRDUDE_ARD_BAUDRATE = 57600\ninclude $(ARDMK_DIR)/Arduino.mk\n</code></pre>\n<p>The source code is also very simple:</p>\n<p>Test.ino:</p>\n<pre><code>void setup(){\n  Serial.begin(9600);\n  Serial.println(&quot;Arduino on Raspberry Pi Test&quot;);\n}\nvoid loop(){\n  delay(2000);\n  Serial.println(&quot;Still there&quot;);\n  Serial.print(&quot;\\n&quot;);\n}\n</code></pre>\n<p>Simply compile with &quot;make&quot;. All tools are contained in the Arduino IDE and all configuration in the Makefile:</p>\n<pre><code>make\n</code></pre>\n<p>The program should now be compiled successfully.</p>\n<p>When you connect the FTDI converter, make sure that it appears as /tty/USB0. This can be checked with dmesg:</p>\n<pre><code>vpetkov@raspi:~/test$ dmesg | tail\n[ 8864.644767] usb 1-1.4: Product: CP2102 USB to UART Bridge Controller\n[ 8864.644780] usb 1-1.4: Manufacturer: Silicon Labs\n[ 8864.644792] usb 1-1.4: SerialNumber: 0001\n[ 8865.808457] usbcore: registered new interface driver usbserial\n[ 8865.808562] usbcore: registered new interface driver usbserial_generic\n[ 8865.808649] usbserial: USB Serial support registered for generic\n[ 8865.812262] usbcore: registered new interface driver cp210x\n[ 8865.812395] usbserial: USB Serial support registered for cp210x\n[ 8865.812559] cp210x 1-1.4:1.0: cp210x converter detected\n[ 8865.813036] usb 1-1.4: cp210x converter now attached to ttyUSB0\n</code></pre>\n<p>We can now program the Arduino. Make sure that you have correctly connected the RX/TX and the reset pins, as well as the Vcc/Ground. You need the 100nF capacitor on the reset line, for it to work correctly.</p>\n<p>Please, also make sure that the Python python-serial package is installed, since it is used by Arduino.mk:</p>\n<pre><code>make upload\n</code></pre>\n<p>If sucessful, you should see something like:</p>\n<pre><code>/home/vpetkov/local/arduino-1.6.13/hardware/tools/avr/bin/avrdude -q -V -p atmega328p -C /home/vpetkov/local/arduino-1.6.13/hardware/tools/avr/etc/avrdude.conf -D -c arduino -b 57600 -P /dev/ttyUSB0 \\\n\t\t-U flash:w:build-pro-ATmega328/test.hex:i\n\navrdude: AVR device initialized and ready to accept instructions\navrdude: Device signature = 0x1e950f (probably m328p)\navrdude: reading input file &quot;build-pro-ATmega328/test.hex&quot;\navrdude: writing flash (1668 bytes):\navrdude: 1668 bytes of flash written\n\navrdude: safemode: Fuses OK (E:00, H:00, L:00)\n\navrdude done.  Thank you.\n\nmake[1]: Leaving directory '/home/vpetkov/test'\n</code></pre>\n<p>Now we can test the message that the Arduino sends to us. I like to use a python command to monitor the serial port:</p>\n<pre><code>python -m serial.tools.miniterm -p /dev/ttyUSB0 -b 9600\n</code></pre>\n<p>You should see period messages like:</p>\n<pre><code>Still there\n</code></pre>\n<p>Press Ctrl and ] to exit.</p>\n<h4 id=\"userlibraries\">User Libraries</h4>\n<p>You might have noticed the line</p>\n<pre><code>USER_LIB_PATH=/home/$(shell whoami)/local/lib\n</code></pre>\n<p>This is where I put my user libraries. For instance, my temperature/humidity sensor uses the DHT library:</p>\n<pre><code>git clone https://github.com/adafruit/DHT-sensor-library ~/local/lib/DHT\n</code></pre>\n<p>Also, I use MySensors for the wireless network:</p>\n<pre><code>git clone https://github.com/mysensors/MySensors ~/local/mysensors\n</code></pre>\n</div>","amp":"12","plaintext":"Overview\nThis guide will show how to install the latest Arduino IDE and supporting\npackages to enable the programming of Arduino devices from the Raspberry Pi 3.\n\nYou will need a USB to Serial FTDI converter in order to program the Arduino\ndevices and to receive the output of the serial console when testing them.\n\nThe complete setup allows us to develop and program Arduino devices on the\ncommand line, without any IDE. We are going to use up-to-date versions of the\nsoftware, so most of the packages will have to be fetched from Github and\ninstalled locally.\n\nPreliminary Steps\nFirst, let's organize the locally installed packages on the Raspberry. I like to\nuse a directory called \"local\" for this purpose. Since there are no other users,\nit makes no sense to install anything in system directories. We will place them\nin ~/local:\n\nmkdir ~/local\ncd local\n\n\nArduino IDE\nBecause of some compatibility issues, I prefer to install an up-to-date version\nof the Arduino IDE. The official Debian package is just too old and not\ncompatible anymore with newer libraries.\n\nDownload to the website https://www.arduino.cc/en/Main/Software. Make sure that\nyou select the Linux ARM (experimental) version. The AMD64 architecture doesn't\nwork on the Raspberry. The current version is\n\nARDUINO 1.6.13\n\n\nDownload the package and move it to the Raspberry with something like:\n\nscp arduino-1.6.13-linuxarm.tar.xz raspi:local\n\n\nThe package can be decompressed inside the ~/local directory using:\n\ncd ~/local\ntar -xf arduino-1.6.13-linuxarm.tar.xz\n\n\nNow we have the Arduino IDE installed under\n\n~/local/arduino-1.6.13\n\n\nIt contains libraries, board description files, etc.\n\nWe can not compile the source files (Arduino sketches) with a plain old Make\nfile, because there are many dependencies and hidden parts from the developer.\nTherefore, we need Arduino.mk which enables us to work on the command line. It\nlives on Github, so we just need to clone it to the ~/local directory:\n\nvpetkov@raspi:~$ git clone https://github.com/sudar/Arduino-Makefile ~/local/arduino_mk\nCloning into '/home/vpetkov/local/arduino_mk'...\nremote: Counting objects: 2483, done.\nremote: Total 2483 (delta 0), reused 0 (delta 0), pack-reused 2483\nReceiving objects: 100% (2483/2483), 1.48 MiB | 522.00 KiB/s, done.\nResolving deltas: 100% (1097/1097), done.\nChecking connectivity... done.\n\n\nNow we are set up to make a first test.\n\nTest Arduino Installation\nFirst, create a directory that contains the code:\n\nmkdir ~/test\n\n\nWe need a Makefile and an *.ino file. Let's create these:\n\ncd ~/test\ntouch Makefile\ntouch Test.ino\n\n\nNow, please keep in mind that the programming test requires the following\ndevices:\n\n 1. A USB to Serial FTDI adapter\n 2. Arduino Pro Mini 3.3v\n\nThe Makefile is tailored for this particular device. If you have another, the\nhardware-specific parts have to be updated.\n\nMakefile:\n\nBOARD_TAG=pro328\nMCU=atmega328\nMONITOR_PORT=/dev/ttyUSB0\nARDUINO_DIR = /home/$(shell whoami)/local/arduino-1.6.13\nARDMK_DIR = /home/$(shell whoami)/local/arduino_mk\nUSER_LIB_PATH=/home/$(shell whoami)/local/lib\nBOARD_TAG = pro\nBOARD_SUB = ATmega328\nMCU = atmega328p\nF_CPU=8000000L\nAVRDUDE_ARD_BAUDRATE = 57600\ninclude $(ARDMK_DIR)/Arduino.mk\n\n\nThe source code is also very simple:\n\nTest.ino:\n\nvoid setup(){\n  Serial.begin(9600);\n  Serial.println(\"Arduino on Raspberry Pi Test\");\n}\nvoid loop(){\n  delay(2000);\n  Serial.println(\"Still there\");\n  Serial.print(\"\\n\");\n}\n\n\nSimply compile with \"make\". All tools are contained in the Arduino IDE and all\nconfiguration in the Makefile:\n\nmake\n\n\nThe program should now be compiled successfully.\n\nWhen you connect the FTDI converter, make sure that it appears as /tty/USB0.\nThis can be checked with dmesg:\n\nvpetkov@raspi:~/test$ dmesg | tail\n[ 8864.644767] usb 1-1.4: Product: CP2102 USB to UART Bridge Controller\n[ 8864.644780] usb 1-1.4: Manufacturer: Silicon Labs\n[ 8864.644792] usb 1-1.4: SerialNumber: 0001\n[ 8865.808457] usbcore: registered new interface driver usbserial\n[ 8865.808562] usbcore: registered new interface driver usbserial_generic\n[ 8865.808649] usbserial: USB Serial support registered for generic\n[ 8865.812262] usbcore: registered new interface driver cp210x\n[ 8865.812395] usbserial: USB Serial support registered for cp210x\n[ 8865.812559] cp210x 1-1.4:1.0: cp210x converter detected\n[ 8865.813036] usb 1-1.4: cp210x converter now attached to ttyUSB0\n\n\nWe can now program the Arduino. Make sure that you have correctly connected the\nRX/TX and the reset pins, as well as the Vcc/Ground. You need the 100nF\ncapacitor on the reset line, for it to work correctly.\n\nPlease, also make sure that the Python python-serial package is installed, since\nit is used by Arduino.mk:\n\nmake upload\n\n\nIf sucessful, you should see something like:\n\n/home/vpetkov/local/arduino-1.6.13/hardware/tools/avr/bin/avrdude -q -V -p atmega328p -C /home/vpetkov/local/arduino-1.6.13/hardware/tools/avr/etc/avrdude.conf -D -c arduino -b 57600 -P /dev/ttyUSB0 \\\n\t\t-U flash:w:build-pro-ATmega328/test.hex:i\n\navrdude: AVR device initialized and ready to accept instructions\navrdude: Device signature = 0x1e950f (probably m328p)\navrdude: reading input file \"build-pro-ATmega328/test.hex\"\navrdude: writing flash (1668 bytes):\navrdude: 1668 bytes of flash written\n\navrdude: safemode: Fuses OK (E:00, H:00, L:00)\n\navrdude done.  Thank you.\n\nmake[1]: Leaving directory '/home/vpetkov/test'\n\n\nNow we can test the message that the Arduino sends to us. I like to use a python\ncommand to monitor the serial port:\n\npython -m serial.tools.miniterm -p /dev/ttyUSB0 -b 9600\n\n\nYou should see period messages like:\n\nStill there\n\n\nPress Ctrl and ] to exit.\n\nUser Libraries\nYou might have noticed the line\n\nUSER_LIB_PATH=/home/$(shell whoami)/local/lib\n\n\nThis is where I put my user libraries. For instance, my temperature/humidity\nsensor uses the DHT library:\n\ngit clone https://github.com/adafruit/DHT-sensor-library ~/local/lib/DHT\n\n\nAlso, I use MySensors for the wireless network:\n\ngit clone https://github.com/mysensors/MySensors ~/local/mysensors","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2016-12-18 17:18:59","created_by":"1","updated_at":"2016-12-18 18:15:30","updated_by":"1","published_at":"2016-12-18 18:15:25","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null},{"id":"5a11dc914a0fc713dc689fb6","uuid":"b5c46e5e-43c6-4cd7-8e45-7f1bc7c1a887","title":"Sensor Network Gateway and Controller","slug":"sensor-network-gateway-and-controller","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"#### Hardware Setup\\n\\n\\n\\n\\n#### Software\\n\\nBuild the raspberry gateway\\n\\n```\\ncd ~/local/mysensors\\n```\\nConfigure the daemon with all bells and whistles\\n```\\n./configure --my-gateway=ethernet --my-transport=nrf24 --my-rf24-irq-pin=15 --my-leds-err-pin=12 --my-leds-rx-pin=16 --my-leds-tx-pin=18 --my-leds-blinking-inverse\\n```\\nBuild\\n```\\nmake\\n```\\nInstall\\n```\\nsudo make install\\n```\\nAdd it to the boot sequence\\n```\\nsudo systemctl enable mysgw.service\\n```\\nStart with\\n```\\nsudo systemctl start mysgw.service\\n```\\nCheck its status\\n```\\nvpetkov@raspi:~/local/mysensors$ systemctl status mysgw.service\\n● mysgw.service - MySensors Gateway daemon\\n   Loaded: loaded (/etc/systemd/system/mysgw.service; enabled)\\n   Active: active (running) since Sun 2016-12-18 18:19:14 UTC; 24s ago\\n Main PID: 4674 (mysgw)\\n   CGroup: /system.slice/mysgw.service\\n           └─4674 /usr/local/bin/mysgw\\n```\\n\\nCheck that it has opened the port. I observed that it fails to do that if the radio is not properly connected.\\n\\n```\\nvpetkov@raspi:~$ netstat -nt\\nActive Internet connections (w/o servers)\\nProto Recv-Q Send-Q Local Address           Foreign Address         State      \\ntcp        0    156 192.168.0.100:22        192.168.0.29:54483      ESTABLISHED\\ntcp        0      0 127.0.0.1:5003          127.0.0.1:57986         ESTABLISHED\\ntcp        0      0 192.168.0.100:22        192.168.0.29:54327      ESTABLISHED\\ntcp        0      0 127.0.0.1:57986         127.0.0.1:5003          ESTABLISHED\\n```\\n\\nThe gateway has port 5003 open, so it is doing fine.\\n\\n#### Controller\\n\\nCreate a data subdirectory\\n\\n```\\ncd ~/senet/controller\\nmkdir data\\n```\\n\\nStart tmux\\n\\n```\\ntmux -S controller\\n```\\n\\nStart the controller\\n\\n```\\n./controller.py\\n```\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><h4 id=\"hardwaresetup\">Hardware Setup</h4>\n<h4 id=\"software\">Software</h4>\n<p>Build the raspberry gateway</p>\n<pre><code>cd ~/local/mysensors\n</code></pre>\n<p>Configure the daemon with all bells and whistles</p>\n<pre><code>./configure --my-gateway=ethernet --my-transport=nrf24 --my-rf24-irq-pin=15 --my-leds-err-pin=12 --my-leds-rx-pin=16 --my-leds-tx-pin=18 --my-leds-blinking-inverse\n</code></pre>\n<p>Build</p>\n<pre><code>make\n</code></pre>\n<p>Install</p>\n<pre><code>sudo make install\n</code></pre>\n<p>Add it to the boot sequence</p>\n<pre><code>sudo systemctl enable mysgw.service\n</code></pre>\n<p>Start with</p>\n<pre><code>sudo systemctl start mysgw.service\n</code></pre>\n<p>Check its status</p>\n<pre><code>vpetkov@raspi:~/local/mysensors$ systemctl status mysgw.service\n● mysgw.service - MySensors Gateway daemon\n   Loaded: loaded (/etc/systemd/system/mysgw.service; enabled)\n   Active: active (running) since Sun 2016-12-18 18:19:14 UTC; 24s ago\n Main PID: 4674 (mysgw)\n   CGroup: /system.slice/mysgw.service\n           └─4674 /usr/local/bin/mysgw\n</code></pre>\n<p>Check that it has opened the port. I observed that it fails to do that if the radio is not properly connected.</p>\n<pre><code>vpetkov@raspi:~$ netstat -nt\nActive Internet connections (w/o servers)\nProto Recv-Q Send-Q Local Address           Foreign Address         State      \ntcp        0    156 192.168.0.100:22        192.168.0.29:54483      ESTABLISHED\ntcp        0      0 127.0.0.1:5003          127.0.0.1:57986         ESTABLISHED\ntcp        0      0 192.168.0.100:22        192.168.0.29:54327      ESTABLISHED\ntcp        0      0 127.0.0.1:57986         127.0.0.1:5003          ESTABLISHED\n</code></pre>\n<p>The gateway has port 5003 open, so it is doing fine.</p>\n<h4 id=\"controller\">Controller</h4>\n<p>Create a data subdirectory</p>\n<pre><code>cd ~/senet/controller\nmkdir data\n</code></pre>\n<p>Start tmux</p>\n<pre><code>tmux -S controller\n</code></pre>\n<p>Start the controller</p>\n<pre><code>./controller.py\n</code></pre>\n</div>","amp":"13","plaintext":"Hardware Setup\nSoftware\nBuild the raspberry gateway\n\ncd ~/local/mysensors\n\n\nConfigure the daemon with all bells and whistles\n\n./configure --my-gateway=ethernet --my-transport=nrf24 --my-rf24-irq-pin=15 --my-leds-err-pin=12 --my-leds-rx-pin=16 --my-leds-tx-pin=18 --my-leds-blinking-inverse\n\n\nBuild\n\nmake\n\n\nInstall\n\nsudo make install\n\n\nAdd it to the boot sequence\n\nsudo systemctl enable mysgw.service\n\n\nStart with\n\nsudo systemctl start mysgw.service\n\n\nCheck its status\n\nvpetkov@raspi:~/local/mysensors$ systemctl status mysgw.service\n● mysgw.service - MySensors Gateway daemon\n   Loaded: loaded (/etc/systemd/system/mysgw.service; enabled)\n   Active: active (running) since Sun 2016-12-18 18:19:14 UTC; 24s ago\n Main PID: 4674 (mysgw)\n   CGroup: /system.slice/mysgw.service\n           └─4674 /usr/local/bin/mysgw\n\n\nCheck that it has opened the port. I observed that it fails to do that if the\nradio is not properly connected.\n\nvpetkov@raspi:~$ netstat -nt\nActive Internet connections (w/o servers)\nProto Recv-Q Send-Q Local Address           Foreign Address         State      \ntcp        0    156 192.168.0.100:22        192.168.0.29:54483      ESTABLISHED\ntcp        0      0 127.0.0.1:5003          127.0.0.1:57986         ESTABLISHED\ntcp        0      0 192.168.0.100:22        192.168.0.29:54327      ESTABLISHED\ntcp        0      0 127.0.0.1:57986         127.0.0.1:5003          ESTABLISHED\n\n\nThe gateway has port 5003 open, so it is doing fine.\n\nController\nCreate a data subdirectory\n\ncd ~/senet/controller\nmkdir data\n\n\nStart tmux\n\ntmux -S controller\n\n\nStart the controller\n\n./controller.py","feature_image":null,"featured":0,"page":0,"status":"draft","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2016-12-18 18:15:47","created_by":"1","updated_at":"2016-12-18 18:48:04","updated_by":"1","published_at":null,"published_by":null,"custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null},{"id":"5a11dc914a0fc713dc689fb7","uuid":"6a0fb58f-0d48-4dfe-8c4d-49161a88ebc4","title":"Tmux sesions not found on Raspberry Pi (Ra","slug":"tmux-sesions-not-found-on-raspberry-pi-ra","mobiledoc":null,"html":"","amp":"14","plaintext":"","feature_image":null,"featured":0,"page":0,"status":"draft","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2016-12-24 06:55:30","created_by":"1","updated_at":"2016-12-24 06:55:33","updated_by":"1","published_at":null,"published_by":null,"custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null},{"id":"5a11dc914a0fc713dc689fb8","uuid":"d8f1fc2b-c1e9-4f27-ba8f-24d0e45cc1ee","title":"Setting Raspberry Pi GPIO Pins on Startup","slug":"setting-raspberry-pi-gpio-pins-on-startup","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"Check firmware version first:\\n\\n```\\nvpetkov@raspres:~$ vcgencmd version\\nNov 25 2016 16:03:50 \\nCopyright (c) 2012 Broadcom\\nversion 48a26a2ae46c497139b3d5a9c8d15485c7b3bfbc (clean) (release)\\n```\\n\\nSetting the GPIO pins on boot is supported from July 15th 2014.\\n\\nThe boot-time GPIO configuration is created as a Device Tree source (.dts) file and then compiled into a binary Device Tree blob (.dtb) file.\\n\\nInstall the Device Tree compiler:\\n\\n```\\nsudo apt-get install device-tree-compiler\\n```\\n\\nCheck:\\n\\n```\\nvpetkov@raspres:~$ which dtc\\n/usr/bin/dtc\\n```\\n\\n\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p>Check firmware version first:</p>\n<pre><code>vpetkov@raspres:~$ vcgencmd version\nNov 25 2016 16:03:50 \nCopyright (c) 2012 Broadcom\nversion 48a26a2ae46c497139b3d5a9c8d15485c7b3bfbc (clean) (release)\n</code></pre>\n<p>Setting the GPIO pins on boot is supported from July 15th 2014.</p>\n<p>The boot-time GPIO configuration is created as a Device Tree source (.dts) file and then compiled into a binary Device Tree blob (.dtb) file.</p>\n<p>Install the Device Tree compiler:</p>\n<pre><code>sudo apt-get install device-tree-compiler\n</code></pre>\n<p>Check:</p>\n<pre><code>vpetkov@raspres:~$ which dtc\n/usr/bin/dtc\n</code></pre>\n</div>","amp":"15","plaintext":"Check firmware version first:\n\nvpetkov@raspres:~$ vcgencmd version\nNov 25 2016 16:03:50 \nCopyright (c) 2012 Broadcom\nversion 48a26a2ae46c497139b3d5a9c8d15485c7b3bfbc (clean) (release)\n\n\nSetting the GPIO pins on boot is supported from July 15th 2014.\n\nThe boot-time GPIO configuration is created as a Device Tree source (.dts) file\nand then compiled into a binary Device Tree blob (.dtb) file.\n\nInstall the Device Tree compiler:\n\nsudo apt-get install device-tree-compiler\n\n\nCheck:\n\nvpetkov@raspres:~$ which dtc\n/usr/bin/dtc","feature_image":null,"featured":0,"page":0,"status":"draft","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2016-12-30 18:41:34","created_by":"1","updated_at":"2016-12-30 20:39:15","updated_by":"1","published_at":null,"published_by":null,"custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null},{"id":"5a11dc914a0fc713dc689fb9","uuid":"d69ddcd6-8a61-4f95-9885-82139d5ec0df","title":"HDFS In Depth","slug":"hdfs-in-depth","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"HDFS\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p>HDFS</p>\n</div>","amp":"16","plaintext":"HDFS","feature_image":null,"featured":0,"page":0,"status":"draft","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2017-01-17 19:48:01","created_by":"1","updated_at":"2017-01-17 19:48:07","updated_by":"1","published_at":null,"published_by":null,"custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null},{"id":"5a11dc914a0fc713dc689fba","uuid":"77fcf4be-e8b0-48d9-88c7-442a9f30d8fa","title":"Undefined Story","slug":"undefined-story","mobiledoc":null,"html":"","amp":"17","plaintext":"","feature_image":null,"featured":0,"page":0,"status":"draft","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2017-01-17 19:48:41","created_by":"1","updated_at":"2017-01-17 19:48:44","updated_by":"1","published_at":null,"published_by":null,"custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null},{"id":"5a11dc914a0fc713dc689fbb","uuid":"eb125cb0-5661-480b-898d-43ef4624ae43","title":"Dirigent","slug":"dirigent","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"- Check for file encoding\\n- Check if there are no \\\\r\\\\n line endings\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><ul>\n<li>Check for file encoding</li>\n<li>Check if there are no \\r\\n line endings</li>\n</ul>\n</div>","amp":"18","plaintext":"* Check for file encoding\n * Check if there are no \\r\\n line endings","feature_image":null,"featured":0,"page":0,"status":"draft","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2017-01-20 08:14:17","created_by":"1","updated_at":"2017-01-20 08:15:31","updated_by":"1","published_at":null,"published_by":null,"custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null},{"id":"5a11dc914a0fc713dc689fbc","uuid":"2a8a0f34-1550-4079-b739-b381eade056e","title":"Digital Document Archive","slug":"digital-document-archive","mobiledoc":null,"html":"","amp":"19","plaintext":"","feature_image":null,"featured":0,"page":0,"status":"draft","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2017-01-20 12:23:51","created_by":"1","updated_at":"2017-01-20 12:23:54","updated_by":"1","published_at":null,"published_by":null,"custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null},{"id":"5a11dc914a0fc713dc689fbd","uuid":"03a9aa56-fcd6-4e59-a987-83acd65dcf7b","title":"Personal Knowledge Database","slug":"personal-knowledge-database","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"Specifically for command-line tools it would be useful to have a reference of command. Also use the command-line fu. Typing a sentence like \\\"check file for line ending characters\\\" should lead to someting like\\n```\\nhexdump -C file\\n```\\n\\nMaybe use a natural language processor to generate versions of the sentence to make it easier to search for.\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p>Specifically for command-line tools it would be useful to have a reference of command. Also use the command-line fu. Typing a sentence like &quot;check file for line ending characters&quot; should lead to someting like</p>\n<pre><code>hexdump -C file\n</code></pre>\n<p>Maybe use a natural language processor to generate versions of the sentence to make it easier to search for.</p>\n</div>","amp":"20","plaintext":"Specifically for command-line tools it would be useful to have a reference of\ncommand. Also use the command-line fu. Typing a sentence like \"check file for\nline ending characters\" should lead to someting like\n\nhexdump -C file\n\n\nMaybe use a natural language processor to generate versions of the sentence to\nmake it easier to search for.","feature_image":null,"featured":0,"page":0,"status":"draft","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2017-01-20 12:24:08","created_by":"1","updated_at":"2017-01-20 12:26:07","updated_by":"1","published_at":null,"published_by":null,"custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null},{"id":"5a11dc914a0fc713dc689fbe","uuid":"979d5b8c-a94b-434e-9c2f-ef4cc3f60354","title":"Config Keeper Service for Hadoop","slug":"config-keeper-service-for-hadoop","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"Registry for Hadoop :). Just ask what is the Hive server configuration on the Namenode or even distributedly. Maybe a solution already exists. Deployment concept should be connected to this.\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p>Registry for Hadoop :). Just ask what is the Hive server configuration on the Namenode or even distributedly. Maybe a solution already exists. Deployment concept should be connected to this.</p>\n</div>","amp":"21","plaintext":"Registry for Hadoop :). Just ask what is the Hive server configuration on the\nNamenode or even distributedly. Maybe a solution already exists. Deployment\nconcept should be connected to this.","feature_image":null,"featured":0,"page":0,"status":"draft","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2017-01-24 07:11:13","created_by":"1","updated_at":"2017-01-24 07:12:07","updated_by":"1","published_at":null,"published_by":null,"custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null},{"id":"5a11dc914a0fc713dc689fbf","uuid":"0af2b0e1-45c7-49d7-b4fb-b7861e42b62a","title":"Magic Board","slug":"magic-board","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"Use deep learning to make setting up presentations easier. Particularly common stuff like tables, etc. Styling applied afterwards. Structure based on templates.\\n\\n- Later - help with drawing on a graphics tablet\\n- Maybe look into tablets 2017\\n- Provide an online service/api\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p>Use deep learning to make setting up presentations easier. Particularly common stuff like tables, etc. Styling applied afterwards. Structure based on templates.</p>\n<ul>\n<li>Later - help with drawing on a graphics tablet</li>\n<li>Maybe look into tablets 2017</li>\n<li>Provide an online service/api</li>\n</ul>\n</div>","amp":"22","plaintext":"Use deep learning to make setting up presentations easier. Particularly common\nstuff like tables, etc. Styling applied afterwards. Structure based on\ntemplates.\n\n * Later - help with drawing on a graphics tablet\n * Maybe look into tablets 2017\n * Provide an online service/api","feature_image":null,"featured":0,"page":0,"status":"draft","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2017-02-03 07:20:52","created_by":"1","updated_at":"2017-02-03 07:22:19","updated_by":"1","published_at":null,"published_by":null,"custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null},{"id":"5a11dc914a0fc713dc689fc0","uuid":"f980a82a-1ad2-437c-adf5-acd0390925fe","title":"New Idea about HDFS Exercises","slug":"new-idea-about-hdfs-exercises","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"Pay for the answer if the student is struggling, in order to motivate further with the learning process - maybe 10-20 cents per question.\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p>Pay for the answer if the student is struggling, in order to motivate further with the learning process - maybe 10-20 cents per question.</p>\n</div>","amp":"23","plaintext":"Pay for the answer if the student is struggling, in order to motivate further\nwith the learning process - maybe 10-20 cents per question.","feature_image":null,"featured":0,"page":0,"status":"draft","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2017-02-12 09:47:00","created_by":"1","updated_at":"2017-02-12 09:47:38","updated_by":"1","published_at":null,"published_by":null,"custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null},{"id":"5a11dc914a0fc713dc689fc2","uuid":"ebc18a0a-5225-471b-b3a1-508e5782a629","title":"How to Install ROS (Robot Operating System) On Raspberry Pi 3 with Raspbian Stretch","slug":"how-to-install-ros-robot-operating-system-on-raspberry-pi-3-with-raspbian-stretch","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"# Installation Instructions\\nAn easier way to install ROS on Raspberry Pi is to use the Linux Mate distribution for Raspberry. However, I am unwilling to use bloated software, so here we do it the hard way :).\\n\\nThis guide describes how to install a barebone kinetic ROS distribution. The installation of additional packages is described in follow-up posts.\\n\\n#### Preparation\\nWe need to install some catkin bootstrap packages first. In order to do this, we must add the ros software repository. It seems that Raspbian Stretch is missing the certificate management service by default, so we have to install it first:\\n\\n```\\nsudo apt-get install dirmngr\\n```\\nNow we can add the ROS repository to apt:\\n```\\nsudo sh -c 'echo \\\"deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main\\\" > /etc/apt/sources.list.d/ros-latest.list'\\n```\\nAdd the public key:\\n```\\nsudo apt-key adv --keyserver hkp://ha.pool.sks-keyservers.net:80 --recv-key 421C365BD9FF1F717815A3895523BAEEB01FA116\\n```\\nUpdate apt:\\n```\\nsudo apt-get update\\n```\\nInstall the bootstrap dependencies:\\n```\\nsudo apt-get install python-rosdep python-rosinstall-generator python-wstool python-rosinstall build-essential\\n```\\nThis will pull some other package dependencies, for instance `build-essentials`.\\n\\n#### Installation\\n###### 1. Initialize the ROS package system\\nThe first step is to initialize the *rosdep* package manager. As per the documentation, **do not use sudo** for `rosdep update`:\\n```\\nsudo rosdep init\\nrosdep update\\n```\\n###### 2. Create the catkin workspace\\n```\\nmkdir ~/ros_catkin_ws\\ncd ~/ros_catkin_ws\\n```\\n###### 3. Build a list of packages and dependencies\\nThe command `rosinstall_generator` is used to plan out the build process by generating a `*.rosinstall` file. It resolves all dependencies for the specified package and writes them down in the `rosinstall` file. That file is used by the `wstool` to fetch the source code for all packages.\\n\\nThe very minimal installation is based on the `ros_comm` package:\\n```\\nrosinstall_generator ros_comm --rosdistro kinetic --deps --wet-only --tar > kinetic-ros_comm-wet.rosinstall\\n```\\nHere `--wet-only` describes that only catkin (the new build system) packages are to be fetched. If you don't want to start with the very basic system, there are a few other options available:\\n\\n* robot\\n* perception\\n* move-arm\\n* simulators\\n* viz\\n\\nFor more info check the documentation at the [ROS Wiki](http://ros.org/reps/rep-0131.html#variants).\\n\\n###### 4. Fetch the packages\\n\\nThe command `wstool` is used to obtain the source code automatically. It can download the packages in parallel, controlled by the `-j` option. In this step, a higher parallelization (-j8) is fine:\\n```\\nwstool init -j8 src kinetic-ros_comm-wet.rosinstall\\n```\\nIf the `wstool init` command fails or it gets interrupted, the download can be resumed as follows:\\n```\\nwstool update -j4 -t src\\n```\\nWhen finished, the source code for the required packages can be found in \\n```\\n~/ros_catkin_ws/src\\n```\\nEven though we have downloaded the packages in `ros_comm`, there might be external dependencies (libraries and tools) that are not yet installed on the Raspbian OS. In order to fetch them automatically, we invoke the following command:\\n```\\nrosdep install --from-paths src --ignore-src --rosdistro kinetic -y\\n```\\nIt installs everything via the apt package manager. The dependecies are resolved for all ROS source packages in the `--from-paths` directory. Since the above command is recursive, we tell it via `--ignore-src` not to install the packages already in the src directory. As we are not working in the ROS environment yet, we have to also specify the distribution name with the `--rosdistro` parameter.\\n\\n###### 5. Build the ROS packages\\nThe command for building the packages has been fetched with wstool along with the source code and is located in the `src` directory. The `catkin_make_isolated` is used for a mix of catkin and cmake packages. If only catkin packages are to be built, the `catkin_make` should be used instead (custom-built ROS packages).\\n\\nThe Raspberry 3 has limited memory. With the default parallel setting `-j4`, it overflows and the build process fails. Empirically, `-j2` is a good parameter.\\n\\nFinally, the install location can be specified with the `--make-space` parameter. In order to simplify the process, we can make the current user owner of the target directory where we want to install ROS:\\n```\\nsudo mkdir -p /opt/ros/kinetic\\nsudo chown rseed42:rseed42 /opt/ros/kinetic\\n```\\n\\nStart the build command:\\n```\\n./src/catkin/bin/catkin_make_isolated -j2 --install --install-space /opt/ros/kinetic -DCMAKE_BUILD_TYPE=Release\\n```\\nIf there is a problem with the compilation (crash due to memory exhaustion), the command can be issued again and the packages that are already compiled will be skipped, so it continues from where it left off.\\n\\n###### 6. Test the installation\\nROS uses a few environment variables that have to be set up prior to using it. According to the build command above, we can find a setup script at:\\n```\\nsource /opt/ros/kinetic/setup.bash\\n```\\nCheck that the ROS environment variables are set:\\n```\\nROS_ETC_DIR=/opt/ros/kinetic/etc/ros\\nROS_ROOT=/opt/ros/kinetic/share/ros\\nROS_MASTER_URI=http://localhost:11311\\nROS_PACKAGE_PATH=/opt/ros/kinetic/share\\nROSLISP_PACKAGE_DIRECTORIES=\\nROS_DISTRO=kinetic\\n```\\nWe need to start the ROS core process as follows:\\n```\\nroscore\\n```\\nWe can now check the default topics with:\\n```\\nrseed42@raspi:~/ros_catkin_ws$ rostopic list\\n/rosout\\n/rosout_agg\\n```\\nEverything seems fine, this was the easy part!\\n\\n\\n\\n\\n\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><h1 id=\"installationinstructions\">Installation Instructions</h1>\n<p>An easier way to install ROS on Raspberry Pi is to use the Linux Mate distribution for Raspberry. However, I am unwilling to use bloated software, so here we do it the hard way :).</p>\n<p>This guide describes how to install a barebone kinetic ROS distribution. The installation of additional packages is described in follow-up posts.</p>\n<h4 id=\"preparation\">Preparation</h4>\n<p>We need to install some catkin bootstrap packages first. In order to do this, we must add the ros software repository. It seems that Raspbian Stretch is missing the certificate management service by default, so we have to install it first:</p>\n<pre><code>sudo apt-get install dirmngr\n</code></pre>\n<p>Now we can add the ROS repository to apt:</p>\n<pre><code>sudo sh -c 'echo &quot;deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main&quot; &gt; /etc/apt/sources.list.d/ros-latest.list'\n</code></pre>\n<p>Add the public key:</p>\n<pre><code>sudo apt-key adv --keyserver hkp://ha.pool.sks-keyservers.net:80 --recv-key 421C365BD9FF1F717815A3895523BAEEB01FA116\n</code></pre>\n<p>Update apt:</p>\n<pre><code>sudo apt-get update\n</code></pre>\n<p>Install the bootstrap dependencies:</p>\n<pre><code>sudo apt-get install python-rosdep python-rosinstall-generator python-wstool python-rosinstall build-essential\n</code></pre>\n<p>This will pull some other package dependencies, for instance <code>build-essentials</code>.</p>\n<h4 id=\"installation\">Installation</h4>\n<h6 id=\"1initializetherospackagesystem\">1. Initialize the ROS package system</h6>\n<p>The first step is to initialize the <em>rosdep</em> package manager. As per the documentation, <strong>do not use sudo</strong> for <code>rosdep update</code>:</p>\n<pre><code>sudo rosdep init\nrosdep update\n</code></pre>\n<h6 id=\"2createthecatkinworkspace\">2. Create the catkin workspace</h6>\n<pre><code>mkdir ~/ros_catkin_ws\ncd ~/ros_catkin_ws\n</code></pre>\n<h6 id=\"3buildalistofpackagesanddependencies\">3. Build a list of packages and dependencies</h6>\n<p>The command <code>rosinstall_generator</code> is used to plan out the build process by generating a <code>*.rosinstall</code> file. It resolves all dependencies for the specified package and writes them down in the <code>rosinstall</code> file. That file is used by the <code>wstool</code> to fetch the source code for all packages.</p>\n<p>The very minimal installation is based on the <code>ros_comm</code> package:</p>\n<pre><code>rosinstall_generator ros_comm --rosdistro kinetic --deps --wet-only --tar &gt; kinetic-ros_comm-wet.rosinstall\n</code></pre>\n<p>Here <code>--wet-only</code> describes that only catkin (the new build system) packages are to be fetched. If you don't want to start with the very basic system, there are a few other options available:</p>\n<ul>\n<li>robot</li>\n<li>perception</li>\n<li>move-arm</li>\n<li>simulators</li>\n<li>viz</li>\n</ul>\n<p>For more info check the documentation at the <a href=\"http://ros.org/reps/rep-0131.html#variants\">ROS Wiki</a>.</p>\n<h6 id=\"4fetchthepackages\">4. Fetch the packages</h6>\n<p>The command <code>wstool</code> is used to obtain the source code automatically. It can download the packages in parallel, controlled by the <code>-j</code> option. In this step, a higher parallelization (-j8) is fine:</p>\n<pre><code>wstool init -j8 src kinetic-ros_comm-wet.rosinstall\n</code></pre>\n<p>If the <code>wstool init</code> command fails or it gets interrupted, the download can be resumed as follows:</p>\n<pre><code>wstool update -j4 -t src\n</code></pre>\n<p>When finished, the source code for the required packages can be found in</p>\n<pre><code>~/ros_catkin_ws/src\n</code></pre>\n<p>Even though we have downloaded the packages in <code>ros_comm</code>, there might be external dependencies (libraries and tools) that are not yet installed on the Raspbian OS. In order to fetch them automatically, we invoke the following command:</p>\n<pre><code>rosdep install --from-paths src --ignore-src --rosdistro kinetic -y\n</code></pre>\n<p>It installs everything via the apt package manager. The dependecies are resolved for all ROS source packages in the <code>--from-paths</code> directory. Since the above command is recursive, we tell it via <code>--ignore-src</code> not to install the packages already in the src directory. As we are not working in the ROS environment yet, we have to also specify the distribution name with the <code>--rosdistro</code> parameter.</p>\n<h6 id=\"5buildtherospackages\">5. Build the ROS packages</h6>\n<p>The command for building the packages has been fetched with wstool along with the source code and is located in the <code>src</code> directory. The <code>catkin_make_isolated</code> is used for a mix of catkin and cmake packages. If only catkin packages are to be built, the <code>catkin_make</code> should be used instead (custom-built ROS packages).</p>\n<p>The Raspberry 3 has limited memory. With the default parallel setting <code>-j4</code>, it overflows and the build process fails. Empirically, <code>-j2</code> is a good parameter.</p>\n<p>Finally, the install location can be specified with the <code>--make-space</code> parameter. In order to simplify the process, we can make the current user owner of the target directory where we want to install ROS:</p>\n<pre><code>sudo mkdir -p /opt/ros/kinetic\nsudo chown rseed42:rseed42 /opt/ros/kinetic\n</code></pre>\n<p>Start the build command:</p>\n<pre><code>./src/catkin/bin/catkin_make_isolated -j2 --install --install-space /opt/ros/kinetic -DCMAKE_BUILD_TYPE=Release\n</code></pre>\n<p>If there is a problem with the compilation (crash due to memory exhaustion), the command can be issued again and the packages that are already compiled will be skipped, so it continues from where it left off.</p>\n<h6 id=\"6testtheinstallation\">6. Test the installation</h6>\n<p>ROS uses a few environment variables that have to be set up prior to using it. According to the build command above, we can find a setup script at:</p>\n<pre><code>source /opt/ros/kinetic/setup.bash\n</code></pre>\n<p>Check that the ROS environment variables are set:</p>\n<pre><code>ROS_ETC_DIR=/opt/ros/kinetic/etc/ros\nROS_ROOT=/opt/ros/kinetic/share/ros\nROS_MASTER_URI=http://localhost:11311\nROS_PACKAGE_PATH=/opt/ros/kinetic/share\nROSLISP_PACKAGE_DIRECTORIES=\nROS_DISTRO=kinetic\n</code></pre>\n<p>We need to start the ROS core process as follows:</p>\n<pre><code>roscore\n</code></pre>\n<p>We can now check the default topics with:</p>\n<pre><code>rseed42@raspi:~/ros_catkin_ws$ rostopic list\n/rosout\n/rosout_agg\n</code></pre>\n<p>Everything seems fine, this was the easy part!</p>\n</div>","amp":"25","plaintext":"Installation Instructions\nAn easier way to install ROS on Raspberry Pi is to use the Linux Mate\ndistribution for Raspberry. However, I am unwilling to use bloated software, so\nhere we do it the hard way :).\n\nThis guide describes how to install a barebone kinetic ROS distribution. The\ninstallation of additional packages is described in follow-up posts.\n\nPreparation\nWe need to install some catkin bootstrap packages first. In order to do this, we\nmust add the ros software repository. It seems that Raspbian Stretch is missing\nthe certificate management service by default, so we have to install it first:\n\nsudo apt-get install dirmngr\n\n\nNow we can add the ROS repository to apt:\n\nsudo sh -c 'echo \"deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main\" > /etc/apt/sources.list.d/ros-latest.list'\n\n\nAdd the public key:\n\nsudo apt-key adv --keyserver hkp://ha.pool.sks-keyservers.net:80 --recv-key 421C365BD9FF1F717815A3895523BAEEB01FA116\n\n\nUpdate apt:\n\nsudo apt-get update\n\n\nInstall the bootstrap dependencies:\n\nsudo apt-get install python-rosdep python-rosinstall-generator python-wstool python-rosinstall build-essential\n\n\nThis will pull some other package dependencies, for instance build-essentials.\n\nInstallation\n1. Initialize the ROS package system\nThe first step is to initialize the rosdep  package manager. As per the\ndocumentation, do not use sudo  for rosdep update:\n\nsudo rosdep init\nrosdep update\n\n\n2. Create the catkin workspace\nmkdir ~/ros_catkin_ws\ncd ~/ros_catkin_ws\n\n\n3. Build a list of packages and dependencies\nThe command rosinstall_generator  is used to plan out the build process by\ngenerating a *.rosinstall  file. It resolves all dependencies for the specified\npackage and writes them down in the rosinstall  file. That file is used by the \nwstool  to fetch the source code for all packages.\n\nThe very minimal installation is based on the ros_comm  package:\n\nrosinstall_generator ros_comm --rosdistro kinetic --deps --wet-only --tar > kinetic-ros_comm-wet.rosinstall\n\n\nHere --wet-only  describes that only catkin (the new build system) packages are\nto be fetched. If you don't want to start with the very basic system, there are\na few other options available:\n\n * robot\n * perception\n * move-arm\n * simulators\n * viz\n\nFor more info check the documentation at the ROS Wiki.\n\n4. Fetch the packages\nThe command wstool  is used to obtain the source code automatically. It can\ndownload the packages in parallel, controlled by the -j  option. In this step, a\nhigher parallelization (-j8) is fine:\n\nwstool init -j8 src kinetic-ros_comm-wet.rosinstall\n\n\nIf the wstool init  command fails or it gets interrupted, the download can be\nresumed as follows:\n\nwstool update -j4 -t src\n\n\nWhen finished, the source code for the required packages can be found in\n\n~/ros_catkin_ws/src\n\n\nEven though we have downloaded the packages in ros_comm, there might be external\ndependencies (libraries and tools) that are not yet installed on the Raspbian\nOS. In order to fetch them automatically, we invoke the following command:\n\nrosdep install --from-paths src --ignore-src --rosdistro kinetic -y\n\n\nIt installs everything via the apt package manager. The dependecies are resolved\nfor all ROS source packages in the --from-paths  directory. Since the above\ncommand is recursive, we tell it via --ignore-src  not to install the packages\nalready in the src directory. As we are not working in the ROS environment yet,\nwe have to also specify the distribution name with the --rosdistro  parameter.\n\n5. Build the ROS packages\nThe command for building the packages has been fetched with wstool along with\nthe source code and is located in the src  directory. The catkin_make_isolated \nis used for a mix of catkin and cmake packages. If only catkin packages are to\nbe built, the catkin_make  should be used instead (custom-built ROS packages).\n\nThe Raspberry 3 has limited memory. With the default parallel setting -j4, it\noverflows and the build process fails. Empirically, -j2  is a good parameter.\n\nFinally, the install location can be specified with the --make-space  parameter.\nIn order to simplify the process, we can make the current user owner of the\ntarget directory where we want to install ROS:\n\nsudo mkdir -p /opt/ros/kinetic\nsudo chown rseed42:rseed42 /opt/ros/kinetic\n\n\nStart the build command:\n\n./src/catkin/bin/catkin_make_isolated -j2 --install --install-space /opt/ros/kinetic -DCMAKE_BUILD_TYPE=Release\n\n\nIf there is a problem with the compilation (crash due to memory exhaustion), the\ncommand can be issued again and the packages that are already compiled will be\nskipped, so it continues from where it left off.\n\n6. Test the installation\nROS uses a few environment variables that have to be set up prior to using it.\nAccording to the build command above, we can find a setup script at:\n\nsource /opt/ros/kinetic/setup.bash\n\n\nCheck that the ROS environment variables are set:\n\nROS_ETC_DIR=/opt/ros/kinetic/etc/ros\nROS_ROOT=/opt/ros/kinetic/share/ros\nROS_MASTER_URI=http://localhost:11311\nROS_PACKAGE_PATH=/opt/ros/kinetic/share\nROSLISP_PACKAGE_DIRECTORIES=\nROS_DISTRO=kinetic\n\n\nWe need to start the ROS core process as follows:\n\nroscore\n\n\nWe can now check the default topics with:\n\nrseed42@raspi:~/ros_catkin_ws$ rostopic list\n/rosout\n/rosout_agg\n\n\nEverything seems fine, this was the easy part!","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2017-11-13 19:47:23","created_by":"1","updated_at":"2017-11-19 00:17:12","updated_by":"1","published_at":"2017-11-19 00:17:12","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null},{"id":"5a11dc914a0fc713dc689fc3","uuid":"9f1bab34-c774-458f-8fa9-83c6ad784ed9","title":"How to install a Raspberry Camera Node on ROS Kinetic (Raspbian Stretch)","slug":"how-to-install-a-raspberry-camera-node-on-ros-kinetic-raspbian-stretch","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"# Raspicam Installation Tutorial\\n\\nIn order to use the Raspberry Pi 3 camera v2, we need to install a third-party ROS node from source, since it is not part of the ROS distribution at the moment. The installation is not that straightforward using only the barebones ROS installation, since there are a few dependencies on other packages. Looking at the package definition [package.xml](https://github.com/UbiquityRobotics/raspicam_node/blob/indigo/package.xml), we see the following dependencies:\\n\\n* catkin\\n* `compressed_image_transport`\\n* roscpp\\n* std_msgs\\n* std_srvs\\n* sensor_msgs\\n* `camera_info_manager`\\n* `dynamic_reconfigure`\\n* libraspberrypi0\\n\\nThe highlighted ones are missing from the `ros_comm` stack, so we need to install them manually. The approach here is simply to fetch the missing packages and then merge them into the existing barebones catkin workspace. Lastly, we build and test `raspicam_node`.\\n\\n###### 1. Install all dependencies\\n\\nFetch the package information for all the missing packages and their ROS dependencies:\\n\\n```\\nrosinstall_generator compressed_image_transport --rosdistro kinetic --deps --wet-only --tar > kinetic-compressed_image_transport-wet.rosinstall\\n\\nrosinstall_generator camera_info_manager --rosdistro kinetic --deps --wet-only --tar > kinetic-camera_info_manager-wet.rosinstall\\n\\nrosinstall_generator dynamic_reconfigure --rosdistro kinetic --deps --wet-only --tar > kinetic-dynamic_reconfigure-wet.rosinstall\\n```\\nNow we need to fetch the sources and put them to the `~/ros_catkin_ws/src` where all the other packages from the barebone installation are located:\\n```\\nwstool merge -t src kinetic-compressed_image_transport-wet.rosinstall\\nwstool merge -t src kinetic-camera_info_manager-wet.rosinstall\\nwstool merge -t src kinetic-dynamic_reconfigure-wet.rosinstall\\n```\\n```\\nwstool update -t src\\n```\\nFetch any additional Raspbian libraries that are needed\\n```\\nrosdep install --from-paths src --ignore-src --rosdistro kinetic -y  \\n```\\nBuild the packages. Please, note that this takes a very long time, so it might be a good idea to build it overnight in a tmux window.\\n```\\n./src/catkin/bin/catkin_make_isolated -j1 --install --install-space /opt/ros/kinetic -DCMAKE_BUILD_TYPE=Release\\n```\\nIt turns out that `raspicam_node` depends on the raspberry pi library, so we also install the headers:\\n```\\nsudo apt-get install libraspberrypi-dev\\n```\\n###### 2. Build the raspicam node\\nCheck out the source code for `raspicam_node` from Github in the workspace src directory:\\n```\\ncd ~/ros_catkin_ws\\ngit clone https://github.com/UbiquityRobotics/raspicam_node.git\\n```\\nInstall other library dependencies automatically:\\n```\\nrosdep install --from-paths src --ignore-src --rosdistro kinetic -y  \\n```\\nFinally, build and install `raspicam_node`. It should be possible to do this more specifically with `--pkg raspicam` and save some time, but this hasn't been tried yet. Two compilation processes `-j2` are a safe option here:\\n```\\n./src/catkin/bin/catkin_make_isolated -j2 --install --install-space /opt/ros/kinetic -DCMAKE_BUILD_TYPE=Release\\n```\\n\\n###### 3. Test the camera\\nNow that we have the camera node installed, we can test the Raspberry camera if we haven't done that yet. It needs to be enabled with `raspi-config` from the `interface` menu:\\n```\\nsudo raspi-config\\n```\\nTake a test shot\\n```\\nraspistill -o test.jpg\\n```\\nEverything is fine, so we can test the raspicam node.\\n\\n###### 4. Test raspicam_node\\nStart a new tmux session and source the setup file in every relevant window\\n```\\nsource /opt/ros/kinetic/setup.bash\\n```\\nOpen a new window for `roscore` and start it there. Find the launch definitions in \\n`~/ros_catkin_ws/src/raspicam_node/launch/` and go there:\\n```\\ncd ~/ros_catkin_ws/src/raspicam_node/launch/\\n```\\nStart `raspicam_node` with the launch configuration of choice:\\n```\\nroslaunch camerav2_1280x960.launch\\n```\\nA simple topic check shows us that the node is active:\\n```\\nrseed42@raspi:~$ rostopic list\\n/raspicam_node/camera_info\\n/raspicam_node/image/compressed\\n/raspicam_node/parameter_descriptions\\n/raspicam_node/parameter_updates\\n/rosout\\n/rosout_agg\\n```\\n\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><h1 id=\"raspicaminstallationtutorial\">Raspicam Installation Tutorial</h1>\n<p>In order to use the Raspberry Pi 3 camera v2, we need to install a third-party ROS node from source, since it is not part of the ROS distribution at the moment. The installation is not that straightforward using only the barebones ROS installation, since there are a few dependencies on other packages. Looking at the package definition <a href=\"https://github.com/UbiquityRobotics/raspicam_node/blob/indigo/package.xml\">package.xml</a>, we see the following dependencies:</p>\n<ul>\n<li>catkin</li>\n<li><code>compressed_image_transport</code></li>\n<li>roscpp</li>\n<li>std_msgs</li>\n<li>std_srvs</li>\n<li>sensor_msgs</li>\n<li><code>camera_info_manager</code></li>\n<li><code>dynamic_reconfigure</code></li>\n<li>libraspberrypi0</li>\n</ul>\n<p>The highlighted ones are missing from the <code>ros_comm</code> stack, so we need to install them manually. The approach here is simply to fetch the missing packages and then merge them into the existing barebones catkin workspace. Lastly, we build and test <code>raspicam_node</code>.</p>\n<h6 id=\"1installalldependencies\">1. Install all dependencies</h6>\n<p>Fetch the package information for all the missing packages and their ROS dependencies:</p>\n<pre><code>rosinstall_generator compressed_image_transport --rosdistro kinetic --deps --wet-only --tar &gt; kinetic-compressed_image_transport-wet.rosinstall\n\nrosinstall_generator camera_info_manager --rosdistro kinetic --deps --wet-only --tar &gt; kinetic-camera_info_manager-wet.rosinstall\n\nrosinstall_generator dynamic_reconfigure --rosdistro kinetic --deps --wet-only --tar &gt; kinetic-dynamic_reconfigure-wet.rosinstall\n</code></pre>\n<p>Now we need to fetch the sources and put them to the <code>~/ros_catkin_ws/src</code> where all the other packages from the barebone installation are located:</p>\n<pre><code>wstool merge -t src kinetic-compressed_image_transport-wet.rosinstall\nwstool merge -t src kinetic-camera_info_manager-wet.rosinstall\nwstool merge -t src kinetic-dynamic_reconfigure-wet.rosinstall\n</code></pre>\n<pre><code>wstool update -t src\n</code></pre>\n<p>Fetch any additional Raspbian libraries that are needed</p>\n<pre><code>rosdep install --from-paths src --ignore-src --rosdistro kinetic -y  \n</code></pre>\n<p>Build the packages. Please, note that this takes a very long time, so it might be a good idea to build it overnight in a tmux window.</p>\n<pre><code>./src/catkin/bin/catkin_make_isolated -j1 --install --install-space /opt/ros/kinetic -DCMAKE_BUILD_TYPE=Release\n</code></pre>\n<p>It turns out that <code>raspicam_node</code> depends on the raspberry pi library, so we also install the headers:</p>\n<pre><code>sudo apt-get install libraspberrypi-dev\n</code></pre>\n<h6 id=\"2buildtheraspicamnode\">2. Build the raspicam node</h6>\n<p>Check out the source code for <code>raspicam_node</code> from Github in the workspace src directory:</p>\n<pre><code>cd ~/ros_catkin_ws\ngit clone https://github.com/UbiquityRobotics/raspicam_node.git\n</code></pre>\n<p>Install other library dependencies automatically:</p>\n<pre><code>rosdep install --from-paths src --ignore-src --rosdistro kinetic -y  \n</code></pre>\n<p>Finally, build and install <code>raspicam_node</code>. It should be possible to do this more specifically with <code>--pkg raspicam</code> and save some time, but this hasn't been tried yet. Two compilation processes <code>-j2</code> are a safe option here:</p>\n<pre><code>./src/catkin/bin/catkin_make_isolated -j2 --install --install-space /opt/ros/kinetic -DCMAKE_BUILD_TYPE=Release\n</code></pre>\n<h6 id=\"3testthecamera\">3. Test the camera</h6>\n<p>Now that we have the camera node installed, we can test the Raspberry camera if we haven't done that yet. It needs to be enabled with <code>raspi-config</code> from the <code>interface</code> menu:</p>\n<pre><code>sudo raspi-config\n</code></pre>\n<p>Take a test shot</p>\n<pre><code>raspistill -o test.jpg\n</code></pre>\n<p>Everything is fine, so we can test the raspicam node.</p>\n<h6 id=\"4testraspicam_node\">4. Test raspicam_node</h6>\n<p>Start a new tmux session and source the setup file in every relevant window</p>\n<pre><code>source /opt/ros/kinetic/setup.bash\n</code></pre>\n<p>Open a new window for <code>roscore</code> and start it there. Find the launch definitions in<br>\n<code>~/ros_catkin_ws/src/raspicam_node/launch/</code> and go there:</p>\n<pre><code>cd ~/ros_catkin_ws/src/raspicam_node/launch/\n</code></pre>\n<p>Start <code>raspicam_node</code> with the launch configuration of choice:</p>\n<pre><code>roslaunch camerav2_1280x960.launch\n</code></pre>\n<p>A simple topic check shows us that the node is active:</p>\n<pre><code>rseed42@raspi:~$ rostopic list\n/raspicam_node/camera_info\n/raspicam_node/image/compressed\n/raspicam_node/parameter_descriptions\n/raspicam_node/parameter_updates\n/rosout\n/rosout_agg\n</code></pre>\n</div>","amp":"26","plaintext":"Raspicam Installation Tutorial\nIn order to use the Raspberry Pi 3 camera v2, we need to install a third-party\nROS node from source, since it is not part of the ROS distribution at the\nmoment. The installation is not that straightforward using only the barebones\nROS installation, since there are a few dependencies on other packages. Looking\nat the package definition package.xml\n[https://github.com/UbiquityRobotics/raspicam_node/blob/indigo/package.xml], we\nsee the following dependencies:\n\n * catkin\n * compressed_image_transport\n * roscpp\n * std_msgs\n * std_srvs\n * sensor_msgs\n * camera_info_manager\n * dynamic_reconfigure\n * libraspberrypi0\n\nThe highlighted ones are missing from the ros_comm  stack, so we need to install\nthem manually. The approach here is simply to fetch the missing packages and\nthen merge them into the existing barebones catkin workspace. Lastly, we build\nand test raspicam_node.\n\n1. Install all dependencies\nFetch the package information for all the missing packages and their ROS\ndependencies:\n\nrosinstall_generator compressed_image_transport --rosdistro kinetic --deps --wet-only --tar > kinetic-compressed_image_transport-wet.rosinstall\n\nrosinstall_generator camera_info_manager --rosdistro kinetic --deps --wet-only --tar > kinetic-camera_info_manager-wet.rosinstall\n\nrosinstall_generator dynamic_reconfigure --rosdistro kinetic --deps --wet-only --tar > kinetic-dynamic_reconfigure-wet.rosinstall\n\n\nNow we need to fetch the sources and put them to the ~/ros_catkin_ws/src  where\nall the other packages from the barebone installation are located:\n\nwstool merge -t src kinetic-compressed_image_transport-wet.rosinstall\nwstool merge -t src kinetic-camera_info_manager-wet.rosinstall\nwstool merge -t src kinetic-dynamic_reconfigure-wet.rosinstall\n\n\nwstool update -t src\n\n\nFetch any additional Raspbian libraries that are needed\n\nrosdep install --from-paths src --ignore-src --rosdistro kinetic -y  \n\n\nBuild the packages. Please, note that this takes a very long time, so it might\nbe a good idea to build it overnight in a tmux window.\n\n./src/catkin/bin/catkin_make_isolated -j1 --install --install-space /opt/ros/kinetic -DCMAKE_BUILD_TYPE=Release\n\n\nIt turns out that raspicam_node  depends on the raspberry pi library, so we also\ninstall the headers:\n\nsudo apt-get install libraspberrypi-dev\n\n\n2. Build the raspicam node\nCheck out the source code for raspicam_node  from Github in the workspace src\ndirectory:\n\ncd ~/ros_catkin_ws\ngit clone https://github.com/UbiquityRobotics/raspicam_node.git\n\n\nInstall other library dependencies automatically:\n\nrosdep install --from-paths src --ignore-src --rosdistro kinetic -y  \n\n\nFinally, build and install raspicam_node. It should be possible to do this more\nspecifically with --pkg raspicam  and save some time, but this hasn't been tried\nyet. Two compilation processes -j2  are a safe option here:\n\n./src/catkin/bin/catkin_make_isolated -j2 --install --install-space /opt/ros/kinetic -DCMAKE_BUILD_TYPE=Release\n\n\n3. Test the camera\nNow that we have the camera node installed, we can test the Raspberry camera if\nwe haven't done that yet. It needs to be enabled with raspi-config  from the \ninterface  menu:\n\nsudo raspi-config\n\n\nTake a test shot\n\nraspistill -o test.jpg\n\n\nEverything is fine, so we can test the raspicam node.\n\n4. Test raspicam_node\nStart a new tmux session and source the setup file in every relevant window\n\nsource /opt/ros/kinetic/setup.bash\n\n\nOpen a new window for roscore  and start it there. Find the launch definitions\nin\n~/ros_catkin_ws/src/raspicam_node/launch/  and go there:\n\ncd ~/ros_catkin_ws/src/raspicam_node/launch/\n\n\nStart raspicam_node  with the launch configuration of choice:\n\nroslaunch camerav2_1280x960.launch\n\n\nA simple topic check shows us that the node is active:\n\nrseed42@raspi:~$ rostopic list\n/raspicam_node/camera_info\n/raspicam_node/image/compressed\n/raspicam_node/parameter_descriptions\n/raspicam_node/parameter_updates\n/rosout\n/rosout_agg","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2017-11-18 19:38:38","created_by":"1","updated_at":"2017-11-19 13:16:54","updated_by":"1","published_at":"2017-11-19 13:16:54","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null},{"id":"5a11dc914a0fc713dc689fc4","uuid":"25cc986a-076d-41ec-8e6f-9530ea6f1c83","title":"ROS Checklist","slug":"ros-checklist","mobiledoc":null,"html":"","amp":"27","plaintext":"","feature_image":null,"featured":0,"page":0,"status":"draft","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2017-11-18 19:40:58","created_by":"1","updated_at":"2017-11-19 18:36:37","updated_by":"1","published_at":null,"published_by":null,"custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null},{"id":"5a11df794a0fc713dc689fcb","uuid":"134f52a2-bf2a-48af-a972-ff265d26f23a","title":"US Accent Overlay","slug":"us-accent-overlay","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"Try to transfer an artistic style \\\"us english accent\\\" or \\\"british english accent\\\" on my own voice recording.\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p>Try to transfer an artistic style &quot;us english accent&quot; or &quot;british english accent&quot; on my own voice recording.</p>\n</div>","amp":null,"plaintext":"Try to transfer an artistic style \"us english accent\" or \"british english\naccent\" on my own voice recording.","feature_image":null,"featured":0,"page":0,"status":"draft","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2017-11-19 19:46:01","created_by":"1","updated_at":"2017-11-19 19:46:41","updated_by":"1","published_at":null,"published_by":null,"custom_excerpt":null,"codeinjection_head":"","codeinjection_foot":"","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null},{"id":"5a11dfaf4a0fc713dc689fcc","uuid":"07cdb398-e6c8-42da-acb7-8f84b52c4361","title":"Tools, tools, tools","slug":"tools-tools-tools","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"Enhance all aspects of development, maybe use Emacs as the most open platform:\\n- colors\\n- code analysis\\n- code fragments\\nFind out if IntelliJ is also fine\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p>Enhance all aspects of development, maybe use Emacs as the most open platform:</p>\n<ul>\n<li>colors</li>\n<li>code analysis</li>\n<li>code fragments<br>\nFind out if IntelliJ is also fine</li>\n</ul>\n</div>","amp":null,"plaintext":"Enhance all aspects of development, maybe use Emacs as the most open platform:\n\n * colors\n * code analysis\n * code fragments\n   Find out if IntelliJ is also fine","feature_image":null,"featured":0,"page":0,"status":"draft","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2017-11-19 19:46:55","created_by":"1","updated_at":"2017-11-19 19:47:52","updated_by":"1","published_at":null,"published_by":null,"custom_excerpt":null,"codeinjection_head":"","codeinjection_foot":"","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null},{"id":"5a11e0194a0fc713dc689fcd","uuid":"48baf88a-955a-4ac9-98d9-01f30bcda3d4","title":"Simple AI Game to make a Tetris Puzzle from Paintings automatically by disasembling the Picture in Segments","slug":"simple-ai-game-to-make-a-tetris-puzzle-from-paintings-automatically-by-disasembling-the-picture-in-segments","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"Image segmentation puzzle. Could also use multiple images for some stuff...\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p>Image segmentation puzzle. Could also use multiple images for some stuff...</p>\n</div>","amp":null,"plaintext":"Image segmentation puzzle. Could also use multiple images for some stuff...","feature_image":null,"featured":0,"page":0,"status":"draft","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2017-11-19 19:48:41","created_by":"1","updated_at":"2017-11-19 19:49:15","updated_by":"1","published_at":null,"published_by":null,"custom_excerpt":null,"codeinjection_head":"","codeinjection_foot":"","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null},{"id":"5a1503d74a0fc713dc689fd1","uuid":"c34101ce-5af6-44e6-b86f-937b085b3266","title":"Mockup Data Service","slug":"mockup-data-service","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"Create a simple service for generating mockup data.\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p>Create a simple service for generating mockup data.</p>\n</div>","amp":null,"plaintext":"Create a simple service for generating mockup data.","feature_image":null,"featured":0,"page":0,"status":"draft","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2017-11-22 04:57:59","created_by":"1","updated_at":"2017-11-22 04:58:20","updated_by":"1","published_at":null,"published_by":null,"custom_excerpt":null,"codeinjection_head":"","codeinjection_foot":"","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null},{"id":"5a165977022c256cff8ee34b","uuid":"3a9dcd78-58df-4e16-b968-8758e7918bd4","title":"Electronics AI","slug":"electronics-ai","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"Try to learn some basic physics principles from data (like an RC circuit). Also, use it to create PCB designs.\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p>Try to learn some basic physics principles from data (like an RC circuit). Also, use it to create PCB designs.</p>\n</div>","amp":null,"plaintext":"Try to learn some basic physics principles from data (like an RC circuit). Also,\nuse it to create PCB designs.","feature_image":null,"featured":0,"page":0,"status":"draft","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2017-11-23 05:15:35","created_by":"1","updated_at":"2017-11-23 05:16:07","updated_by":"1","published_at":null,"published_by":null,"custom_excerpt":null,"codeinjection_head":"","codeinjection_foot":"","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null},{"id":"5a1ab247022c256cff8ee34e","uuid":"71f9c550-47a4-4a26-84a9-30ddc5eefa50","title":"Connecting Sensors to Raspberry PI via ROS","slug":"connecting-sensors-to-raspberry-pi-via-ros","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"# Accelerometer MPU6050\\n\\nhttps://github.com/chrisspen/ros_mpu6050_node\\n\\n### Install dependencies:\\n\\n#### Transforms Libraries\\n\\n```\\nrosinstall_generator tf --rosdistro kinetic --deps --wet-only --tar > kinetic-tf-wet.rosinstall\\n```\\n\\n```\\nwstool merge -t src kinetic-tf-wet.rosinstall\\n```\\n\\n```\\nwstool update -t src\\n```\\n```\\nrosdep install --from-paths src --ignore-src --rosdistro kinetic -y  \\n```\\n\\nBuild everything (building individual packages in this case makes no sense, because there are quite a few new dependencies)\\n```\\n./src/catkin/bin/catkin_make_isolated -j1 --install --install-space /opt/ros/kinetic --pkg ${PACKAGE_NAME} -DCMAKE_BUILD_TYPE=Release\\n```\\n\\n\\n\\n####\\n\\n\\n```\\nsudo git clone https://github.com/chrisspen/i2cdevlib.git\\n```\\n\\n\\n###\\n\\nUnfortunately, the author of the library did not configure the package to be installed properly. In order to install it manually, copy all files under directory\\n```\\ninstall_isolated\\n```\\n\\nto their proper location in \\n\\n```\\n/opt/ros/kinetic\\n```\\n\\n### Start\\n\\nTo start the accelerometer node, you need to be root. Issue the following command:\\n\\n```\\nroslaunch ros_mpu6050_node mpu6050.launch\\n```\\n\\n\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><h1 id=\"accelerometermpu6050\">Accelerometer MPU6050</h1>\n<p><a href=\"https://github.com/chrisspen/ros_mpu6050_node\">https://github.com/chrisspen/ros_mpu6050_node</a></p>\n<h3 id=\"installdependencies\">Install dependencies:</h3>\n<h4 id=\"transformslibraries\">Transforms Libraries</h4>\n<pre><code>rosinstall_generator tf --rosdistro kinetic --deps --wet-only --tar &gt; kinetic-tf-wet.rosinstall\n</code></pre>\n<pre><code>wstool merge -t src kinetic-tf-wet.rosinstall\n</code></pre>\n<pre><code>wstool update -t src\n</code></pre>\n<pre><code>rosdep install --from-paths src --ignore-src --rosdistro kinetic -y  \n</code></pre>\n<p>Build everything (building individual packages in this case makes no sense, because there are quite a few new dependencies)</p>\n<pre><code>./src/catkin/bin/catkin_make_isolated -j1 --install --install-space /opt/ros/kinetic --pkg ${PACKAGE_NAME} -DCMAKE_BUILD_TYPE=Release\n</code></pre>\n<h4 id=\"\"></h4>\n<pre><code>sudo git clone https://github.com/chrisspen/i2cdevlib.git\n</code></pre>\n<h3 id=\"\"></h3>\n<p>Unfortunately, the author of the library did not configure the package to be installed properly. In order to install it manually, copy all files under directory</p>\n<pre><code>install_isolated\n</code></pre>\n<p>to their proper location in</p>\n<pre><code>/opt/ros/kinetic\n</code></pre>\n<h3 id=\"start\">Start</h3>\n<p>To start the accelerometer node, you need to be root. Issue the following command:</p>\n<pre><code>roslaunch ros_mpu6050_node mpu6050.launch\n</code></pre>\n</div>","amp":null,"plaintext":"Accelerometer MPU6050\nhttps://github.com/chrisspen/ros_mpu6050_node\n\nInstall dependencies:\nTransforms Libraries\nrosinstall_generator tf --rosdistro kinetic --deps --wet-only --tar > kinetic-tf-wet.rosinstall\n\n\nwstool merge -t src kinetic-tf-wet.rosinstall\n\n\nwstool update -t src\n\n\nrosdep install --from-paths src --ignore-src --rosdistro kinetic -y  \n\n\nBuild everything (building individual packages in this case makes no sense,\nbecause there are quite a few new dependencies)\n\n./src/catkin/bin/catkin_make_isolated -j1 --install --install-space /opt/ros/kinetic --pkg ${PACKAGE_NAME} -DCMAKE_BUILD_TYPE=Release\n\n\n\nsudo git clone https://github.com/chrisspen/i2cdevlib.git","feature_image":null,"featured":0,"page":0,"status":"draft","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2017-11-26 12:23:35","created_by":"1","updated_at":"2017-11-26 18:44:59","updated_by":"1","published_at":null,"published_by":null,"custom_excerpt":null,"codeinjection_head":"","codeinjection_foot":"","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null},{"id":"5a223ae6f9f2cf12a4881ee8","uuid":"3d24b149-11c2-4719-b739-6aed73433ee2","title":"AI SHELL","slug":"untitlead","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"The ease of Google for finding the necessary commands. Intuitive natural language interface for online-search when a particular command is not known. Memory bank of various options to help you find the options you need without going to web sites or man pages. Develop and test simple Bash scripts automatically. Environment checks. Online collaborative system to enhance the shell with knowledge from many people.\\n\\nFreemium model\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p>The ease of Google for finding the necessary commands. Intuitive natural language interface for online-search when a particular command is not known. Memory bank of various options to help you find the options you need without going to web sites or man pages. Develop and test simple Bash scripts automatically. Environment checks. Online collaborative system to enhance the shell with knowledge from many people.</p>\n<p>Freemium model</p>\n</div>","amp":null,"plaintext":"The ease of Google for finding the necessary commands. Intuitive natural\nlanguage interface for online-search when a particular command is not known.\nMemory bank of various options to help you find the options you need without\ngoing to web sites or man pages. Develop and test simple Bash scripts\nautomatically. Environment checks. Online collaborative system to enhance the\nshell with knowledge from many people.\n\nFreemium model","feature_image":null,"featured":0,"page":0,"status":"draft","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2017-12-02 05:32:22","created_by":"1","updated_at":"2017-12-02 05:38:53","updated_by":"1","published_at":null,"published_by":null,"custom_excerpt":null,"codeinjection_head":"","codeinjection_foot":"","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null},{"id":"5a227db3f9f2cf12a4881ee9","uuid":"eeb698ba-9f9f-47e2-ba85-2363d07d27c8","title":"Truck Controller","slug":"truck-controller","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"# Initializing the ROS project\\nThe truck controller is a new node that received commands from several control topics and generates the servo signals that drive the truck. The project should be located in the catkin workspace:\\n\\n```\\ncd ros_catkin_ws/src\\n```\\n\\nWe need to initialze the project structure with the `catkin_create_pkg` command first. There is a dependency on the ROS C++ library:\\n```\\ncatkin_create_pkg truck_controller roscpp\\n```\\nLet's modify `package.xml` so that we can build it properly.\\n\\n# Prepare the Project Files\\n## package.xml\\nSet the project version\\n```\\n<version>0.0.1</version>\\n```\\n\\n```\\n<description>Servo control node for driving the MAN model truck</description>\\n```\\n\\n```\\n<maintainer email=\\\"petkov.venelin@gmail.com\\\">rseed42</maintainer>\\n```\\n\\n```\\n<license>Apache</license>\\n```\\n## controller_node.cpp\\nAdd the source code template to `truck_controller/src/truck_controller_node.cpp`.\\n## CMakeLists.txt\\nThe project build file has to be adjusted so that all components can be built properly.\\n\\nEnable C++11 compatibility if it is used with more complex projects:\\n```\\nadd_compile_options(-std=c++11)\\n```\\n```\\n\\n```\\ncatkin_package(\\n  DEPENDS roscpp\\n)\\n```\\nadd_executable(distance_node src/distance_node.cpp)\\n```\\n\\n```\\ntarget_link_libraries(${PROJECT_NAME}_node\\n  ${catkin_LIBRARIES} \\n)\\n```\\n\\nUncomment\\n```\\ninstall(TARGETS ${PROJECT_NAME}_node\\n  ARCHIVE DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}\\n  LIBRARY DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}\\n  RUNTIME DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}\\n)\\n```\\n\\n```\\ninstall(FILES\\n  launch\\n  DESTINATION ${CATKIN_PACKAGE_SHARE_DESTINATION}\\n)\\n```\\n\\n## truck_controller.launch\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><h1 id=\"initializingtherosproject\">Initializing the ROS project</h1>\n<p>The truck controller is a new node that received commands from several control topics and generates the servo signals that drive the truck. The project should be located in the catkin workspace:</p>\n<pre><code>cd ros_catkin_ws/src\n</code></pre>\n<p>We need to initialze the project structure with the <code>catkin_create_pkg</code> command first. There is a dependency on the ROS C++ library:</p>\n<pre><code>catkin_create_pkg truck_controller roscpp\n</code></pre>\n<p>Let's modify <code>package.xml</code> so that we can build it properly.</p>\n<h1 id=\"preparetheprojectfiles\">Prepare the Project Files</h1>\n<h2 id=\"packagexml\">package.xml</h2>\n<p>Set the project version</p>\n<pre><code>&lt;version&gt;0.0.1&lt;/version&gt;\n</code></pre>\n<pre><code>&lt;description&gt;Servo control node for driving the MAN model truck&lt;/description&gt;\n</code></pre>\n<pre><code>&lt;maintainer email=&quot;petkov.venelin@gmail.com&quot;&gt;rseed42&lt;/maintainer&gt;\n</code></pre>\n<pre><code>&lt;license&gt;Apache&lt;/license&gt;\n</code></pre>\n<h2 id=\"controller_nodecpp\">controller_node.cpp</h2>\n<p>Add the source code template to <code>truck_controller/src/truck_controller_node.cpp</code>.</p>\n<h2 id=\"cmakeliststxt\">CMakeLists.txt</h2>\n<p>The project build file has to be adjusted so that all components can be built properly.</p>\n<p>Enable C++11 compatibility if it is used with more complex projects:</p>\n<pre><code>add_compile_options(-std=c++11)\n</code></pre>\n<pre><code>\n</code></pre>\n<p>catkin_package(<br>\nDEPENDS roscpp<br>\n)</p>\n<pre><code>add_executable(distance_node src/distance_node.cpp)\n</code></pre>\n<pre><code>target_link_libraries(${PROJECT_NAME}_node\n  ${catkin_LIBRARIES} \n)\n</code></pre>\n<p>Uncomment</p>\n<pre><code>install(TARGETS ${PROJECT_NAME}_node\n  ARCHIVE DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}\n  LIBRARY DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}\n  RUNTIME DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}\n)\n</code></pre>\n<pre><code>install(FILES\n  launch\n  DESTINATION ${CATKIN_PACKAGE_SHARE_DESTINATION}\n)\n</code></pre>\n<h2 id=\"truck_controllerlaunch\">truck_controller.launch</h2>\n</div>","amp":null,"plaintext":"Initializing the ROS project\nThe truck controller is a new node that received commands from several control\ntopics and generates the servo signals that drive the truck. The project should\nbe located in the catkin workspace:\n\ncd ros_catkin_ws/src\n\n\nWe need to initialze the project structure with the catkin_create_pkg  command\nfirst. There is a dependency on the ROS C++ library:\n\ncatkin_create_pkg truck_controller roscpp\n\n\nLet's modify package.xml  so that we can build it properly.\n\nPrepare the Project Files\npackage.xml\nSet the project version\n\n<version>0.0.1</version>\n\n\n<description>Servo control node for driving the MAN model truck</description>\n\n\n<maintainer email=\"petkov.venelin@gmail.com\">rseed42</maintainer>\n\n\n<license>Apache</license>\n\n\ncontroller_node.cpp\nAdd the source code template to truck_controller/src/truck_controller_node.cpp.\n\nCMakeLists.txt\nThe project build file has to be adjusted so that all components can be built\nproperly.\n\nEnable C++11 compatibility if it is used with more complex projects:\n\nadd_compile_options(-std=c++11)\n\n\n\n\n\ncatkin_package(\nDEPENDS roscpp\n)\n\nadd_executable(distance_node src/distance_node.cpp)\n\n\ntarget_link_libraries(${PROJECT_NAME}_node\n  ${catkin_LIBRARIES} \n)\n\n\nUncomment\n\ninstall(TARGETS ${PROJECT_NAME}_node\n  ARCHIVE DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}\n  LIBRARY DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}\n  RUNTIME DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}\n)\n\n\ninstall(FILES\n  launch\n  DESTINATION ${CATKIN_PACKAGE_SHARE_DESTINATION}\n)\n\n\ntruck_controller.launch","feature_image":null,"featured":0,"page":0,"status":"draft","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2017-12-02 10:17:23","created_by":"1","updated_at":"2017-12-02 11:13:24","updated_by":"1","published_at":null,"published_by":null,"custom_excerpt":null,"codeinjection_head":"","codeinjection_foot":"","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null},{"id":"5a3cfd21f9f2cf12a4881eed","uuid":"c5b9f490-308f-4afc-ac63-33c47ddc5807","title":"Install Docker on Raspbian Stretch","slug":"untitled","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"```\\nsudo apt-get install \\\\\\n     apt-transport-https \\\\\\n     ca-certificates \\\\\\n     curl \\\\\\n     gnupg2 \\\\\\n     software-properties-common\\n```\\n\\n```\\ncurl -fsSL https://download.docker.com/linux/$(. /etc/os-release; echo \\\"$ID\\\")/gpg | sudo apt-key add -\\n```\\n\\n```\\nsudo apt-key fingerprint 0EBFCD88\\n```\\n\\n```\\necho \\\"deb [arch=armhf] https://download.docker.com/linux/$(. /etc/os-release; echo \\\"$ID\\\") \\\\\\n     $(lsb_release -cs) stable\\\" | \\\\\\n    sudo tee /etc/apt/sources.list.d/docker.list\\n```\\n\\n```\\nsudo apt-get update\\n```\\n\\n```\\nsudo apt-get install docker-ce\\n```\\n\\n```\\nsudo usermod -a -G docker vpetkov\\n```\\n```\\nsudo docker run armhf/hello-world\\n```\\n\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><pre><code>sudo apt-get install \\\n     apt-transport-https \\\n     ca-certificates \\\n     curl \\\n     gnupg2 \\\n     software-properties-common\n</code></pre>\n<pre><code>curl -fsSL https://download.docker.com/linux/$(. /etc/os-release; echo &quot;$ID&quot;)/gpg | sudo apt-key add -\n</code></pre>\n<pre><code>sudo apt-key fingerprint 0EBFCD88\n</code></pre>\n<pre><code>echo &quot;deb [arch=armhf] https://download.docker.com/linux/$(. /etc/os-release; echo &quot;$ID&quot;) \\\n     $(lsb_release -cs) stable&quot; | \\\n    sudo tee /etc/apt/sources.list.d/docker.list\n</code></pre>\n<pre><code>sudo apt-get update\n</code></pre>\n<pre><code>sudo apt-get install docker-ce\n</code></pre>\n<pre><code>sudo usermod -a -G docker vpetkov\n</code></pre>\n<pre><code>sudo docker run armhf/hello-world\n</code></pre>\n</div>","amp":null,"plaintext":"sudo apt-get install \\\n     apt-transport-https \\\n     ca-certificates \\\n     curl \\\n     gnupg2 \\\n     software-properties-common\n\n\ncurl -fsSL https://download.docker.com/linux/$(. /etc/os-release; echo \"$ID\")/gpg | sudo apt-key add -\n\n\nsudo apt-key fingerprint 0EBFCD88\n\n\necho \"deb [arch=armhf] https://download.docker.com/linux/$(. /etc/os-release; echo \"$ID\") \\\n     $(lsb_release -cs) stable\" | \\\n    sudo tee /etc/apt/sources.list.d/docker.list\n\n\nsudo apt-get update\n\n\nsudo apt-get install docker-ce\n\n\nsudo usermod -a -G docker vpetkov\n\n\nsudo docker run armhf/hello-world","feature_image":null,"featured":0,"page":0,"status":"draft","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2017-12-22 12:40:01","created_by":"1","updated_at":"2017-12-22 12:49:54","updated_by":"1","published_at":null,"published_by":null,"custom_excerpt":null,"codeinjection_head":"","codeinjection_foot":"","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null},{"id":"5a3d3be5f9f2cf12a4881eee","uuid":"4da8b24d-02b6-4bb0-bc23-6030fbf5a16b","title":"Compile MySensors Raspberry Pi Gateway","slug":"compile-mysensors-raspberry-pi-gateway","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"We need to enable the LED status controls as well as the mqtt broker.\\n\\nSerial Gateway:\\n```\\n./configure --my-transport=nrf24 --my-gateway=serial --my-serial-port=/dev/ttyAMA0 --my-leds-err-pin=12 --my-leds-rx-pin=16 --my-leds-tx-pin=18\\n```\\n\\nMQTT Gateway:\\n\\n```\\n./configure --my-transport=nrf24 --my-gateway=serial --my-serial-port=/dev/ttyAMA0 --my-leds-err-pin=12 --my-leds-rx-pin=16 --my-leds-tx-pin=18\\n```\\n\\n```\\nmake\\n```\\n\\n```\\nsudo make install\\n```\\n\\n```\\nsudo systemctl enable mysgw.service\\n```\\n\\nOutput in syslog\\n\\n```\\ntail -f /var/log/syslog\\n```\\n\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p>We need to enable the LED status controls as well as the mqtt broker.</p>\n<p>Serial Gateway:</p>\n<pre><code>./configure --my-transport=nrf24 --my-gateway=serial --my-serial-port=/dev/ttyAMA0 --my-leds-err-pin=12 --my-leds-rx-pin=16 --my-leds-tx-pin=18\n</code></pre>\n<p>MQTT Gateway:</p>\n<pre><code>./configure --my-transport=nrf24 --my-gateway=serial --my-serial-port=/dev/ttyAMA0 --my-leds-err-pin=12 --my-leds-rx-pin=16 --my-leds-tx-pin=18\n</code></pre>\n<pre><code>make\n</code></pre>\n<pre><code>sudo make install\n</code></pre>\n<pre><code>sudo systemctl enable mysgw.service\n</code></pre>\n<p>Output in syslog</p>\n<pre><code>tail -f /var/log/syslog\n</code></pre>\n</div>","amp":null,"plaintext":"We need to enable the LED status controls as well as the mqtt broker.\n\nSerial Gateway:\n\n./configure --my-transport=nrf24 --my-gateway=serial --my-serial-port=/dev/ttyAMA0 --my-leds-err-pin=12 --my-leds-rx-pin=16 --my-leds-tx-pin=18\n\n\nMQTT Gateway:\n\n./configure --my-transport=nrf24 --my-gateway=serial --my-serial-port=/dev/ttyAMA0 --my-leds-err-pin=12 --my-leds-rx-pin=16 --my-leds-tx-pin=18\n\n\nmake\n\n\nsudo make install\n\n\nsudo systemctl enable mysgw.service\n\n\nOutput in syslog\n\ntail -f /var/log/syslog","feature_image":null,"featured":0,"page":0,"status":"draft","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2017-12-22 17:07:49","created_by":"1","updated_at":"2017-12-22 19:14:04","updated_by":"1","published_at":null,"published_by":null,"custom_excerpt":null,"codeinjection_head":"","codeinjection_foot":"","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null},{"id":"5a3e80b3f9f2cf12a4881ef0","uuid":"8627effc-7359-4204-bd50-17fa3552da66","title":"Programming Atmega 328p","slug":"programming-atmega-328p","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"# Connection\\n* Reset\\n* MISO\\n* MOISE\\n* SCLK\\n* VCC\\n* GND\\n\\nSee below how to connect the pins to the raspberry. All lines have a 1k resistor between the raspberry and the arduino.\\n\\n# Programmer\\nInstall avrdude\\n```\\nsudo apt-get install -y avrdude\\n```\\nList all supported microcontrollers\\n```\\navrdude -c avrisp\\n```\\nThe Atmega 328 is called `m328`.\\n\\nCopy the avrdude config file, since we need to define a new programmer:\\n```\\ncp /etc/avrdude.conf ~/avrdude_gpio.conf\\n```\\nAdd the following configuration to `avrdude_gpio.conf` (at the end of the file):\\n```\\n#------------------------------------------------------------\\n# Raspberry Programmer\\n#------------------------------------------------------------\\nprogrammer\\n  id    = \\\"pi_1\\\";\\n  desc  = \\\"Use the Linux sysfs interface to bitbang GPIO lines\\\";\\n  type  = \\\"linuxgpio\\\";\\n  reset = 12;\\n  sck   = 24;\\n  mosi  = 23;\\n  miso  = 18;\\n;\\n```\\n\\nWe can now check the connection to the microcontroller with the following command:\\n```\\nsudo avrdude -p m328 -C ~/avrdude_gpio.conf -c pi_1 -v\\n```\\nIf the connection is ok, then we are ready to program it.\\n\\n```\\nsudo avrdude -p m328 -C avrdude_gpio.conf -c pi_1 -v -U flash:w:build-pro-ATmega328/led.hex:i\\n```\\nCalculate the fuses:\\nhttp://www.engbedded.com/fusecalc/\\n\\nSet up the fuses for an 8 MHz external oscillator:\\n```\\navrdude ... -U lfuse:w:0xfe:m\\n```\\n\\nThe full command ist:\\n\\n```\\nsudo avrdude -p m328 -C avrdude_gpio.conf -c pi_1 -v -U lfuse:w:0xfe:m -U flash:w:build-pro-ATmega328/led.hex:i\\n```\\n\\nNEW: Using the linuxspi programmer\\n\\nConnect directly to the MISO/MOSI/etc. corresponding pins.\\nChange the commands\\nFuses\\n\\n\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><h1 id=\"connection\">Connection</h1>\n<ul>\n<li>Reset</li>\n<li>MISO</li>\n<li>MOISE</li>\n<li>SCLK</li>\n<li>VCC</li>\n<li>GND</li>\n</ul>\n<p>See below how to connect the pins to the raspberry. All lines have a 1k resistor between the raspberry and the arduino.</p>\n<h1 id=\"programmer\">Programmer</h1>\n<p>Install avrdude</p>\n<pre><code>sudo apt-get install -y avrdude\n</code></pre>\n<p>List all supported microcontrollers</p>\n<pre><code>avrdude -c avrisp\n</code></pre>\n<p>The Atmega 328 is called <code>m328</code>.</p>\n<p>Copy the avrdude config file, since we need to define a new programmer:</p>\n<pre><code>cp /etc/avrdude.conf ~/avrdude_gpio.conf\n</code></pre>\n<p>Add the following configuration to <code>avrdude_gpio.conf</code> (at the end of the file):</p>\n<pre><code>#------------------------------------------------------------\n# Raspberry Programmer\n#------------------------------------------------------------\nprogrammer\n  id    = &quot;pi_1&quot;;\n  desc  = &quot;Use the Linux sysfs interface to bitbang GPIO lines&quot;;\n  type  = &quot;linuxgpio&quot;;\n  reset = 12;\n  sck   = 24;\n  mosi  = 23;\n  miso  = 18;\n;\n</code></pre>\n<p>We can now check the connection to the microcontroller with the following command:</p>\n<pre><code>sudo avrdude -p m328 -C ~/avrdude_gpio.conf -c pi_1 -v\n</code></pre>\n<p>If the connection is ok, then we are ready to program it.</p>\n<pre><code>sudo avrdude -p m328 -C avrdude_gpio.conf -c pi_1 -v -U flash:w:build-pro-ATmega328/led.hex:i\n</code></pre>\n<p>Calculate the fuses:<br>\n<a href=\"http://www.engbedded.com/fusecalc/\">http://www.engbedded.com/fusecalc/</a></p>\n<p>Set up the fuses for an 8 MHz external oscillator:</p>\n<pre><code>avrdude ... -U lfuse:w:0xfe:m\n</code></pre>\n<p>The full command ist:</p>\n<pre><code>sudo avrdude -p m328 -C avrdude_gpio.conf -c pi_1 -v -U lfuse:w:0xfe:m -U flash:w:build-pro-ATmega328/led.hex:i\n</code></pre>\n<p>NEW: Using the linuxspi programmer</p>\n<p>Connect directly to the MISO/MOSI/etc. corresponding pins.<br>\nChange the commands<br>\nFuses</p>\n</div>","amp":null,"plaintext":"Connection\n * Reset\n * MISO\n * MOISE\n * SCLK\n * VCC\n * GND\n\nSee below how to connect the pins to the raspberry. All lines have a 1k resistor\nbetween the raspberry and the arduino.\n\nProgrammer\nInstall avrdude\n\nsudo apt-get install -y avrdude\n\n\nList all supported microcontrollers\n\navrdude -c avrisp\n\n\nThe Atmega 328 is called m328.\n\nCopy the avrdude config file, since we need to define a new programmer:\n\ncp /etc/avrdude.conf ~/avrdude_gpio.conf\n\n\nAdd the following configuration to avrdude_gpio.conf  (at the end of the file):\n\n#------------------------------------------------------------\n# Raspberry Programmer\n#------------------------------------------------------------\nprogrammer\n  id    = \"pi_1\";\n  desc  = \"Use the Linux sysfs interface to bitbang GPIO lines\";\n  type  = \"linuxgpio\";\n  reset = 12;\n  sck   = 24;\n  mosi  = 23;\n  miso  = 18;\n;\n\n\nWe can now check the connection to the microcontroller with the following\ncommand:\n\nsudo avrdude -p m328 -C ~/avrdude_gpio.conf -c pi_1 -v\n\n\nIf the connection is ok, then we are ready to program it.\n\nsudo avrdude -p m328 -C avrdude_gpio.conf -c pi_1 -v -U flash:w:build-pro-ATmega328/led.hex:i\n\n\nCalculate the fuses:\nhttp://www.engbedded.com/fusecalc/\n\nSet up the fuses for an 8 MHz external oscillator:\n\navrdude ... -U lfuse:w:0xfe:m\n\n\nThe full command ist:\n\nsudo avrdude -p m328 -C avrdude_gpio.conf -c pi_1 -v -U lfuse:w:0xfe:m -U flash:w:build-pro-ATmega328/led.hex:i","feature_image":null,"featured":0,"page":0,"status":"draft","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2017-12-23 16:13:39","created_by":"1","updated_at":"2017-12-25 11:02:06","updated_by":"1","published_at":null,"published_by":null,"custom_excerpt":null,"codeinjection_head":"","codeinjection_foot":"","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null}],"users":[{"id":"1","name":"Venelin Petkov","slug":"venelin","ghost_auth_access_token":null,"ghost_auth_id":null,"password":"$2a$10$C4JM1HXzIhSkQuidu8LlYOBGYYXsu5IZ4Dxy.AQvAIWDs8Ch/Watm","email":"petkov.venelin@gmail.com","profile_image":"//www.gravatar.com/avatar/b2133fea3fa95e847523b6f9a6884142?s=250&d=mm&r=x","cover_image":null,"bio":null,"website":null,"location":null,"facebook":null,"twitter":null,"accessibility":null,"status":"active","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"tour":"[\"getting-started\"]","last_seen":"2018-05-27 07:47:07","created_at":"2017-11-19 19:28:37","created_by":"1","updated_at":"2018-05-27 07:47:07","updated_by":"1"}],"roles":[{"id":"5a11db640d8cc313b188c307","name":"Administrator","description":"Administrators","created_at":"2017-11-19 19:28:36","created_by":"1","updated_at":"2017-11-19 19:28:36","updated_by":"1"},{"id":"5a11db640d8cc313b188c308","name":"Editor","description":"Editors","created_at":"2017-11-19 19:28:36","created_by":"1","updated_at":"2017-11-19 19:28:36","updated_by":"1"},{"id":"5a11db640d8cc313b188c309","name":"Author","description":"Authors","created_at":"2017-11-19 19:28:36","created_by":"1","updated_at":"2017-11-19 19:28:36","updated_by":"1"},{"id":"5a11db640d8cc313b188c30a","name":"Owner","description":"Blog Owner","created_at":"2017-11-19 19:28:36","created_by":"1","updated_at":"2017-11-19 19:28:36","updated_by":"1"}],"roles_users":[{"id":"5a11db660d8cc313b188c33e","role_id":"5a11db640d8cc313b188c309","user_id":"5951f5fca366002ebd5dbef7"},{"id":"5a11db680d8cc313b188c3ac","role_id":"5a11db640d8cc313b188c30a","user_id":"1"}],"permissions":[{"id":"5a11db640d8cc313b188c30b","name":"Export database","object_type":"db","action_type":"exportContent","object_id":null,"created_at":"2017-11-19 19:28:36","created_by":"1","updated_at":"2017-11-19 19:28:36","updated_by":"1"},{"id":"5a11db640d8cc313b188c30c","name":"Import database","object_type":"db","action_type":"importContent","object_id":null,"created_at":"2017-11-19 19:28:36","created_by":"1","updated_at":"2017-11-19 19:28:36","updated_by":"1"},{"id":"5a11db640d8cc313b188c30d","name":"Delete all content","object_type":"db","action_type":"deleteAllContent","object_id":null,"created_at":"2017-11-19 19:28:36","created_by":"1","updated_at":"2017-11-19 19:28:36","updated_by":"1"},{"id":"5a11db640d8cc313b188c30e","name":"Send mail","object_type":"mail","action_type":"send","object_id":null,"created_at":"2017-11-19 19:28:36","created_by":"1","updated_at":"2017-11-19 19:28:36","updated_by":"1"},{"id":"5a11db640d8cc313b188c30f","name":"Browse notifications","object_type":"notification","action_type":"browse","object_id":null,"created_at":"2017-11-19 19:28:36","created_by":"1","updated_at":"2017-11-19 19:28:36","updated_by":"1"},{"id":"5a11db640d8cc313b188c310","name":"Add notifications","object_type":"notification","action_type":"add","object_id":null,"created_at":"2017-11-19 19:28:36","created_by":"1","updated_at":"2017-11-19 19:28:36","updated_by":"1"},{"id":"5a11db640d8cc313b188c311","name":"Delete notifications","object_type":"notification","action_type":"destroy","object_id":null,"created_at":"2017-11-19 19:28:36","created_by":"1","updated_at":"2017-11-19 19:28:36","updated_by":"1"},{"id":"5a11db640d8cc313b188c312","name":"Browse posts","object_type":"post","action_type":"browse","object_id":null,"created_at":"2017-11-19 19:28:36","created_by":"1","updated_at":"2017-11-19 19:28:36","updated_by":"1"},{"id":"5a11db640d8cc313b188c313","name":"Read posts","object_type":"post","action_type":"read","object_id":null,"created_at":"2017-11-19 19:28:36","created_by":"1","updated_at":"2017-11-19 19:28:36","updated_by":"1"},{"id":"5a11db640d8cc313b188c314","name":"Edit posts","object_type":"post","action_type":"edit","object_id":null,"created_at":"2017-11-19 19:28:36","created_by":"1","updated_at":"2017-11-19 19:28:36","updated_by":"1"},{"id":"5a11db640d8cc313b188c315","name":"Add posts","object_type":"post","action_type":"add","object_id":null,"created_at":"2017-11-19 19:28:36","created_by":"1","updated_at":"2017-11-19 19:28:36","updated_by":"1"},{"id":"5a11db640d8cc313b188c316","name":"Delete posts","object_type":"post","action_type":"destroy","object_id":null,"created_at":"2017-11-19 19:28:36","created_by":"1","updated_at":"2017-11-19 19:28:36","updated_by":"1"},{"id":"5a11db640d8cc313b188c317","name":"Browse settings","object_type":"setting","action_type":"browse","object_id":null,"created_at":"2017-11-19 19:28:36","created_by":"1","updated_at":"2017-11-19 19:28:36","updated_by":"1"},{"id":"5a11db640d8cc313b188c318","name":"Read settings","object_type":"setting","action_type":"read","object_id":null,"created_at":"2017-11-19 19:28:36","created_by":"1","updated_at":"2017-11-19 19:28:36","updated_by":"1"},{"id":"5a11db640d8cc313b188c319","name":"Edit settings","object_type":"setting","action_type":"edit","object_id":null,"created_at":"2017-11-19 19:28:36","created_by":"1","updated_at":"2017-11-19 19:28:36","updated_by":"1"},{"id":"5a11db640d8cc313b188c31a","name":"Generate slugs","object_type":"slug","action_type":"generate","object_id":null,"created_at":"2017-11-19 19:28:36","created_by":"1","updated_at":"2017-11-19 19:28:36","updated_by":"1"},{"id":"5a11db640d8cc313b188c31b","name":"Browse tags","object_type":"tag","action_type":"browse","object_id":null,"created_at":"2017-11-19 19:28:36","created_by":"1","updated_at":"2017-11-19 19:28:36","updated_by":"1"},{"id":"5a11db640d8cc313b188c31c","name":"Read tags","object_type":"tag","action_type":"read","object_id":null,"created_at":"2017-11-19 19:28:36","created_by":"1","updated_at":"2017-11-19 19:28:36","updated_by":"1"},{"id":"5a11db640d8cc313b188c31d","name":"Edit tags","object_type":"tag","action_type":"edit","object_id":null,"created_at":"2017-11-19 19:28:36","created_by":"1","updated_at":"2017-11-19 19:28:36","updated_by":"1"},{"id":"5a11db640d8cc313b188c31e","name":"Add tags","object_type":"tag","action_type":"add","object_id":null,"created_at":"2017-11-19 19:28:36","created_by":"1","updated_at":"2017-11-19 19:28:36","updated_by":"1"},{"id":"5a11db640d8cc313b188c31f","name":"Delete tags","object_type":"tag","action_type":"destroy","object_id":null,"created_at":"2017-11-19 19:28:36","created_by":"1","updated_at":"2017-11-19 19:28:36","updated_by":"1"},{"id":"5a11db640d8cc313b188c320","name":"Browse themes","object_type":"theme","action_type":"browse","object_id":null,"created_at":"2017-11-19 19:28:36","created_by":"1","updated_at":"2017-11-19 19:28:36","updated_by":"1"},{"id":"5a11db640d8cc313b188c321","name":"Edit themes","object_type":"theme","action_type":"edit","object_id":null,"created_at":"2017-11-19 19:28:36","created_by":"1","updated_at":"2017-11-19 19:28:36","updated_by":"1"},{"id":"5a11db640d8cc313b188c322","name":"Activate themes","object_type":"theme","action_type":"activate","object_id":null,"created_at":"2017-11-19 19:28:36","created_by":"1","updated_at":"2017-11-19 19:28:36","updated_by":"1"},{"id":"5a11db640d8cc313b188c323","name":"Upload themes","object_type":"theme","action_type":"add","object_id":null,"created_at":"2017-11-19 19:28:36","created_by":"1","updated_at":"2017-11-19 19:28:36","updated_by":"1"},{"id":"5a11db640d8cc313b188c324","name":"Download themes","object_type":"theme","action_type":"read","object_id":null,"created_at":"2017-11-19 19:28:36","created_by":"1","updated_at":"2017-11-19 19:28:36","updated_by":"1"},{"id":"5a11db640d8cc313b188c325","name":"Delete themes","object_type":"theme","action_type":"destroy","object_id":null,"created_at":"2017-11-19 19:28:36","created_by":"1","updated_at":"2017-11-19 19:28:36","updated_by":"1"},{"id":"5a11db640d8cc313b188c326","name":"Browse users","object_type":"user","action_type":"browse","object_id":null,"created_at":"2017-11-19 19:28:36","created_by":"1","updated_at":"2017-11-19 19:28:36","updated_by":"1"},{"id":"5a11db640d8cc313b188c327","name":"Read users","object_type":"user","action_type":"read","object_id":null,"created_at":"2017-11-19 19:28:36","created_by":"1","updated_at":"2017-11-19 19:28:36","updated_by":"1"},{"id":"5a11db640d8cc313b188c328","name":"Edit users","object_type":"user","action_type":"edit","object_id":null,"created_at":"2017-11-19 19:28:36","created_by":"1","updated_at":"2017-11-19 19:28:36","updated_by":"1"},{"id":"5a11db640d8cc313b188c329","name":"Add users","object_type":"user","action_type":"add","object_id":null,"created_at":"2017-11-19 19:28:36","created_by":"1","updated_at":"2017-11-19 19:28:36","updated_by":"1"},{"id":"5a11db640d8cc313b188c32a","name":"Delete users","object_type":"user","action_type":"destroy","object_id":null,"created_at":"2017-11-19 19:28:36","created_by":"1","updated_at":"2017-11-19 19:28:36","updated_by":"1"},{"id":"5a11db640d8cc313b188c32b","name":"Assign a role","object_type":"role","action_type":"assign","object_id":null,"created_at":"2017-11-19 19:28:36","created_by":"1","updated_at":"2017-11-19 19:28:36","updated_by":"1"},{"id":"5a11db640d8cc313b188c32c","name":"Browse roles","object_type":"role","action_type":"browse","object_id":null,"created_at":"2017-11-19 19:28:36","created_by":"1","updated_at":"2017-11-19 19:28:36","updated_by":"1"},{"id":"5a11db640d8cc313b188c32d","name":"Browse clients","object_type":"client","action_type":"browse","object_id":null,"created_at":"2017-11-19 19:28:36","created_by":"1","updated_at":"2017-11-19 19:28:36","updated_by":"1"},{"id":"5a11db640d8cc313b188c32e","name":"Read clients","object_type":"client","action_type":"read","object_id":null,"created_at":"2017-11-19 19:28:36","created_by":"1","updated_at":"2017-11-19 19:28:36","updated_by":"1"},{"id":"5a11db640d8cc313b188c32f","name":"Edit clients","object_type":"client","action_type":"edit","object_id":null,"created_at":"2017-11-19 19:28:36","created_by":"1","updated_at":"2017-11-19 19:28:36","updated_by":"1"},{"id":"5a11db640d8cc313b188c330","name":"Add clients","object_type":"client","action_type":"add","object_id":null,"created_at":"2017-11-19 19:28:36","created_by":"1","updated_at":"2017-11-19 19:28:36","updated_by":"1"},{"id":"5a11db640d8cc313b188c331","name":"Delete clients","object_type":"client","action_type":"destroy","object_id":null,"created_at":"2017-11-19 19:28:36","created_by":"1","updated_at":"2017-11-19 19:28:36","updated_by":"1"},{"id":"5a11db640d8cc313b188c332","name":"Browse subscribers","object_type":"subscriber","action_type":"browse","object_id":null,"created_at":"2017-11-19 19:28:36","created_by":"1","updated_at":"2017-11-19 19:28:36","updated_by":"1"},{"id":"5a11db650d8cc313b188c333","name":"Read subscribers","object_type":"subscriber","action_type":"read","object_id":null,"created_at":"2017-11-19 19:28:36","created_by":"1","updated_at":"2017-11-19 19:28:36","updated_by":"1"},{"id":"5a11db650d8cc313b188c334","name":"Edit subscribers","object_type":"subscriber","action_type":"edit","object_id":null,"created_at":"2017-11-19 19:28:37","created_by":"1","updated_at":"2017-11-19 19:28:37","updated_by":"1"},{"id":"5a11db650d8cc313b188c335","name":"Add subscribers","object_type":"subscriber","action_type":"add","object_id":null,"created_at":"2017-11-19 19:28:37","created_by":"1","updated_at":"2017-11-19 19:28:37","updated_by":"1"},{"id":"5a11db650d8cc313b188c336","name":"Delete subscribers","object_type":"subscriber","action_type":"destroy","object_id":null,"created_at":"2017-11-19 19:28:37","created_by":"1","updated_at":"2017-11-19 19:28:37","updated_by":"1"},{"id":"5a11db650d8cc313b188c337","name":"Browse invites","object_type":"invite","action_type":"browse","object_id":null,"created_at":"2017-11-19 19:28:37","created_by":"1","updated_at":"2017-11-19 19:28:37","updated_by":"1"},{"id":"5a11db650d8cc313b188c338","name":"Read invites","object_type":"invite","action_type":"read","object_id":null,"created_at":"2017-11-19 19:28:37","created_by":"1","updated_at":"2017-11-19 19:28:37","updated_by":"1"},{"id":"5a11db650d8cc313b188c339","name":"Edit invites","object_type":"invite","action_type":"edit","object_id":null,"created_at":"2017-11-19 19:28:37","created_by":"1","updated_at":"2017-11-19 19:28:37","updated_by":"1"},{"id":"5a11db650d8cc313b188c33a","name":"Add invites","object_type":"invite","action_type":"add","object_id":null,"created_at":"2017-11-19 19:28:37","created_by":"1","updated_at":"2017-11-19 19:28:37","updated_by":"1"},{"id":"5a11db650d8cc313b188c33b","name":"Delete invites","object_type":"invite","action_type":"destroy","object_id":null,"created_at":"2017-11-19 19:28:37","created_by":"1","updated_at":"2017-11-19 19:28:37","updated_by":"1"},{"id":"5a11db650d8cc313b188c33c","name":"Download redirects","object_type":"redirect","action_type":"download","object_id":null,"created_at":"2017-11-19 19:28:37","created_by":"1","updated_at":"2017-11-19 19:28:37","updated_by":"1"},{"id":"5a11db650d8cc313b188c33d","name":"Upload redirects","object_type":"redirect","action_type":"upload","object_id":null,"created_at":"2017-11-19 19:28:37","created_by":"1","updated_at":"2017-11-19 19:28:37","updated_by":"1"},{"id":"5a4bb081840bfc48dba34861","name":"Add webhooks","object_type":"webhook","action_type":"add","object_id":null,"created_at":"2018-01-02 16:17:05","created_by":"1","updated_at":"2018-01-02 16:17:05","updated_by":"1"},{"id":"5a4bb081840bfc48dba34862","name":"Delete webhooks","object_type":"webhook","action_type":"destroy","object_id":null,"created_at":"2018-01-02 16:17:05","created_by":"1","updated_at":"2018-01-02 16:17:05","updated_by":"1"}],"permissions_users":[],"permissions_roles":[{"id":"5a11db660d8cc313b188c33f","role_id":"5a11db640d8cc313b188c307","permission_id":"5a11db640d8cc313b188c30b"},{"id":"5a11db660d8cc313b188c340","role_id":"5a11db640d8cc313b188c307","permission_id":"5a11db640d8cc313b188c30c"},{"id":"5a11db660d8cc313b188c341","role_id":"5a11db640d8cc313b188c307","permission_id":"5a11db640d8cc313b188c30d"},{"id":"5a11db660d8cc313b188c342","role_id":"5a11db640d8cc313b188c307","permission_id":"5a11db640d8cc313b188c30e"},{"id":"5a11db660d8cc313b188c343","role_id":"5a11db640d8cc313b188c307","permission_id":"5a11db640d8cc313b188c30f"},{"id":"5a11db660d8cc313b188c344","role_id":"5a11db640d8cc313b188c307","permission_id":"5a11db640d8cc313b188c310"},{"id":"5a11db660d8cc313b188c345","role_id":"5a11db640d8cc313b188c307","permission_id":"5a11db640d8cc313b188c311"},{"id":"5a11db660d8cc313b188c346","role_id":"5a11db640d8cc313b188c307","permission_id":"5a11db640d8cc313b188c312"},{"id":"5a11db660d8cc313b188c347","role_id":"5a11db640d8cc313b188c307","permission_id":"5a11db640d8cc313b188c313"},{"id":"5a11db660d8cc313b188c348","role_id":"5a11db640d8cc313b188c307","permission_id":"5a11db640d8cc313b188c314"},{"id":"5a11db660d8cc313b188c349","role_id":"5a11db640d8cc313b188c307","permission_id":"5a11db640d8cc313b188c315"},{"id":"5a11db660d8cc313b188c34a","role_id":"5a11db640d8cc313b188c307","permission_id":"5a11db640d8cc313b188c316"},{"id":"5a11db660d8cc313b188c34b","role_id":"5a11db640d8cc313b188c307","permission_id":"5a11db640d8cc313b188c317"},{"id":"5a11db660d8cc313b188c34c","role_id":"5a11db640d8cc313b188c307","permission_id":"5a11db640d8cc313b188c318"},{"id":"5a11db660d8cc313b188c34d","role_id":"5a11db640d8cc313b188c307","permission_id":"5a11db640d8cc313b188c319"},{"id":"5a11db660d8cc313b188c34e","role_id":"5a11db640d8cc313b188c307","permission_id":"5a11db640d8cc313b188c31a"},{"id":"5a11db660d8cc313b188c34f","role_id":"5a11db640d8cc313b188c307","permission_id":"5a11db640d8cc313b188c31b"},{"id":"5a11db660d8cc313b188c350","role_id":"5a11db640d8cc313b188c307","permission_id":"5a11db640d8cc313b188c31c"},{"id":"5a11db660d8cc313b188c351","role_id":"5a11db640d8cc313b188c307","permission_id":"5a11db640d8cc313b188c31d"},{"id":"5a11db660d8cc313b188c352","role_id":"5a11db640d8cc313b188c307","permission_id":"5a11db640d8cc313b188c31e"},{"id":"5a11db660d8cc313b188c353","role_id":"5a11db640d8cc313b188c307","permission_id":"5a11db640d8cc313b188c31f"},{"id":"5a11db660d8cc313b188c354","role_id":"5a11db640d8cc313b188c307","permission_id":"5a11db640d8cc313b188c320"},{"id":"5a11db660d8cc313b188c355","role_id":"5a11db640d8cc313b188c307","permission_id":"5a11db640d8cc313b188c321"},{"id":"5a11db660d8cc313b188c356","role_id":"5a11db640d8cc313b188c307","permission_id":"5a11db640d8cc313b188c322"},{"id":"5a11db660d8cc313b188c357","role_id":"5a11db640d8cc313b188c307","permission_id":"5a11db640d8cc313b188c323"},{"id":"5a11db660d8cc313b188c358","role_id":"5a11db640d8cc313b188c307","permission_id":"5a11db640d8cc313b188c324"},{"id":"5a11db660d8cc313b188c359","role_id":"5a11db640d8cc313b188c307","permission_id":"5a11db640d8cc313b188c325"},{"id":"5a11db670d8cc313b188c35a","role_id":"5a11db640d8cc313b188c307","permission_id":"5a11db640d8cc313b188c326"},{"id":"5a11db670d8cc313b188c35b","role_id":"5a11db640d8cc313b188c307","permission_id":"5a11db640d8cc313b188c327"},{"id":"5a11db670d8cc313b188c35c","role_id":"5a11db640d8cc313b188c307","permission_id":"5a11db640d8cc313b188c328"},{"id":"5a11db670d8cc313b188c35d","role_id":"5a11db640d8cc313b188c307","permission_id":"5a11db640d8cc313b188c329"},{"id":"5a11db670d8cc313b188c35e","role_id":"5a11db640d8cc313b188c307","permission_id":"5a11db640d8cc313b188c32a"},{"id":"5a11db670d8cc313b188c35f","role_id":"5a11db640d8cc313b188c307","permission_id":"5a11db640d8cc313b188c32b"},{"id":"5a11db670d8cc313b188c360","role_id":"5a11db640d8cc313b188c307","permission_id":"5a11db640d8cc313b188c32c"},{"id":"5a11db670d8cc313b188c361","role_id":"5a11db640d8cc313b188c307","permission_id":"5a11db640d8cc313b188c32d"},{"id":"5a11db670d8cc313b188c362","role_id":"5a11db640d8cc313b188c307","permission_id":"5a11db640d8cc313b188c32e"},{"id":"5a11db670d8cc313b188c363","role_id":"5a11db640d8cc313b188c307","permission_id":"5a11db640d8cc313b188c32f"},{"id":"5a11db670d8cc313b188c364","role_id":"5a11db640d8cc313b188c307","permission_id":"5a11db640d8cc313b188c330"},{"id":"5a11db670d8cc313b188c365","role_id":"5a11db640d8cc313b188c307","permission_id":"5a11db640d8cc313b188c331"},{"id":"5a11db670d8cc313b188c366","role_id":"5a11db640d8cc313b188c307","permission_id":"5a11db640d8cc313b188c332"},{"id":"5a11db670d8cc313b188c367","role_id":"5a11db640d8cc313b188c307","permission_id":"5a11db650d8cc313b188c333"},{"id":"5a11db670d8cc313b188c368","role_id":"5a11db640d8cc313b188c307","permission_id":"5a11db650d8cc313b188c334"},{"id":"5a11db670d8cc313b188c369","role_id":"5a11db640d8cc313b188c307","permission_id":"5a11db650d8cc313b188c335"},{"id":"5a11db670d8cc313b188c36a","role_id":"5a11db640d8cc313b188c307","permission_id":"5a11db650d8cc313b188c336"},{"id":"5a11db670d8cc313b188c36b","role_id":"5a11db640d8cc313b188c307","permission_id":"5a11db650d8cc313b188c337"},{"id":"5a11db670d8cc313b188c36c","role_id":"5a11db640d8cc313b188c307","permission_id":"5a11db650d8cc313b188c338"},{"id":"5a11db670d8cc313b188c36d","role_id":"5a11db640d8cc313b188c307","permission_id":"5a11db650d8cc313b188c339"},{"id":"5a11db670d8cc313b188c36e","role_id":"5a11db640d8cc313b188c307","permission_id":"5a11db650d8cc313b188c33a"},{"id":"5a11db670d8cc313b188c36f","role_id":"5a11db640d8cc313b188c307","permission_id":"5a11db650d8cc313b188c33b"},{"id":"5a11db670d8cc313b188c370","role_id":"5a11db640d8cc313b188c307","permission_id":"5a11db650d8cc313b188c33c"},{"id":"5a11db670d8cc313b188c371","role_id":"5a11db640d8cc313b188c307","permission_id":"5a11db650d8cc313b188c33d"},{"id":"5a11db670d8cc313b188c372","role_id":"5a11db640d8cc313b188c308","permission_id":"5a11db640d8cc313b188c312"},{"id":"5a11db670d8cc313b188c373","role_id":"5a11db640d8cc313b188c308","permission_id":"5a11db640d8cc313b188c313"},{"id":"5a11db670d8cc313b188c374","role_id":"5a11db640d8cc313b188c308","permission_id":"5a11db640d8cc313b188c314"},{"id":"5a11db670d8cc313b188c375","role_id":"5a11db640d8cc313b188c308","permission_id":"5a11db640d8cc313b188c315"},{"id":"5a11db670d8cc313b188c376","role_id":"5a11db640d8cc313b188c308","permission_id":"5a11db640d8cc313b188c316"},{"id":"5a11db670d8cc313b188c377","role_id":"5a11db640d8cc313b188c308","permission_id":"5a11db640d8cc313b188c317"},{"id":"5a11db670d8cc313b188c378","role_id":"5a11db640d8cc313b188c308","permission_id":"5a11db640d8cc313b188c318"},{"id":"5a11db670d8cc313b188c379","role_id":"5a11db640d8cc313b188c308","permission_id":"5a11db640d8cc313b188c31a"},{"id":"5a11db670d8cc313b188c37a","role_id":"5a11db640d8cc313b188c308","permission_id":"5a11db640d8cc313b188c31b"},{"id":"5a11db670d8cc313b188c37b","role_id":"5a11db640d8cc313b188c308","permission_id":"5a11db640d8cc313b188c31c"},{"id":"5a11db670d8cc313b188c37c","role_id":"5a11db640d8cc313b188c308","permission_id":"5a11db640d8cc313b188c31d"},{"id":"5a11db670d8cc313b188c37d","role_id":"5a11db640d8cc313b188c308","permission_id":"5a11db640d8cc313b188c31e"},{"id":"5a11db670d8cc313b188c37e","role_id":"5a11db640d8cc313b188c308","permission_id":"5a11db640d8cc313b188c31f"},{"id":"5a11db670d8cc313b188c37f","role_id":"5a11db640d8cc313b188c308","permission_id":"5a11db640d8cc313b188c326"},{"id":"5a11db670d8cc313b188c380","role_id":"5a11db640d8cc313b188c308","permission_id":"5a11db640d8cc313b188c327"},{"id":"5a11db670d8cc313b188c381","role_id":"5a11db640d8cc313b188c308","permission_id":"5a11db640d8cc313b188c328"},{"id":"5a11db670d8cc313b188c382","role_id":"5a11db640d8cc313b188c308","permission_id":"5a11db640d8cc313b188c329"},{"id":"5a11db670d8cc313b188c383","role_id":"5a11db640d8cc313b188c308","permission_id":"5a11db640d8cc313b188c32a"},{"id":"5a11db670d8cc313b188c384","role_id":"5a11db640d8cc313b188c308","permission_id":"5a11db640d8cc313b188c32b"},{"id":"5a11db670d8cc313b188c385","role_id":"5a11db640d8cc313b188c308","permission_id":"5a11db640d8cc313b188c32c"},{"id":"5a11db670d8cc313b188c386","role_id":"5a11db640d8cc313b188c308","permission_id":"5a11db640d8cc313b188c32d"},{"id":"5a11db670d8cc313b188c387","role_id":"5a11db640d8cc313b188c308","permission_id":"5a11db640d8cc313b188c32e"},{"id":"5a11db670d8cc313b188c388","role_id":"5a11db640d8cc313b188c308","permission_id":"5a11db640d8cc313b188c32f"},{"id":"5a11db670d8cc313b188c389","role_id":"5a11db640d8cc313b188c308","permission_id":"5a11db640d8cc313b188c330"},{"id":"5a11db670d8cc313b188c38a","role_id":"5a11db640d8cc313b188c308","permission_id":"5a11db640d8cc313b188c331"},{"id":"5a11db670d8cc313b188c38b","role_id":"5a11db640d8cc313b188c308","permission_id":"5a11db650d8cc313b188c335"},{"id":"5a11db670d8cc313b188c38c","role_id":"5a11db640d8cc313b188c308","permission_id":"5a11db650d8cc313b188c337"},{"id":"5a11db670d8cc313b188c38d","role_id":"5a11db640d8cc313b188c308","permission_id":"5a11db650d8cc313b188c338"},{"id":"5a11db670d8cc313b188c38e","role_id":"5a11db640d8cc313b188c308","permission_id":"5a11db650d8cc313b188c339"},{"id":"5a11db670d8cc313b188c38f","role_id":"5a11db640d8cc313b188c308","permission_id":"5a11db650d8cc313b188c33a"},{"id":"5a11db670d8cc313b188c390","role_id":"5a11db640d8cc313b188c308","permission_id":"5a11db650d8cc313b188c33b"},{"id":"5a11db670d8cc313b188c391","role_id":"5a11db640d8cc313b188c308","permission_id":"5a11db640d8cc313b188c320"},{"id":"5a11db670d8cc313b188c392","role_id":"5a11db640d8cc313b188c309","permission_id":"5a11db640d8cc313b188c312"},{"id":"5a11db670d8cc313b188c393","role_id":"5a11db640d8cc313b188c309","permission_id":"5a11db640d8cc313b188c313"},{"id":"5a11db670d8cc313b188c394","role_id":"5a11db640d8cc313b188c309","permission_id":"5a11db640d8cc313b188c315"},{"id":"5a11db670d8cc313b188c395","role_id":"5a11db640d8cc313b188c309","permission_id":"5a11db640d8cc313b188c317"},{"id":"5a11db670d8cc313b188c396","role_id":"5a11db640d8cc313b188c309","permission_id":"5a11db640d8cc313b188c318"},{"id":"5a11db670d8cc313b188c397","role_id":"5a11db640d8cc313b188c309","permission_id":"5a11db640d8cc313b188c31a"},{"id":"5a11db670d8cc313b188c398","role_id":"5a11db640d8cc313b188c309","permission_id":"5a11db640d8cc313b188c31b"},{"id":"5a11db670d8cc313b188c399","role_id":"5a11db640d8cc313b188c309","permission_id":"5a11db640d8cc313b188c31c"},{"id":"5a11db670d8cc313b188c39a","role_id":"5a11db640d8cc313b188c309","permission_id":"5a11db640d8cc313b188c31e"},{"id":"5a11db670d8cc313b188c39b","role_id":"5a11db640d8cc313b188c309","permission_id":"5a11db640d8cc313b188c326"},{"id":"5a11db670d8cc313b188c39c","role_id":"5a11db640d8cc313b188c309","permission_id":"5a11db640d8cc313b188c327"},{"id":"5a11db670d8cc313b188c39d","role_id":"5a11db640d8cc313b188c309","permission_id":"5a11db640d8cc313b188c32c"},{"id":"5a11db670d8cc313b188c39e","role_id":"5a11db640d8cc313b188c309","permission_id":"5a11db640d8cc313b188c32d"},{"id":"5a11db670d8cc313b188c39f","role_id":"5a11db640d8cc313b188c309","permission_id":"5a11db640d8cc313b188c32e"},{"id":"5a11db670d8cc313b188c3a0","role_id":"5a11db640d8cc313b188c309","permission_id":"5a11db640d8cc313b188c32f"},{"id":"5a11db670d8cc313b188c3a1","role_id":"5a11db640d8cc313b188c309","permission_id":"5a11db640d8cc313b188c330"},{"id":"5a11db670d8cc313b188c3a2","role_id":"5a11db640d8cc313b188c309","permission_id":"5a11db640d8cc313b188c331"},{"id":"5a11db670d8cc313b188c3a3","role_id":"5a11db640d8cc313b188c309","permission_id":"5a11db650d8cc313b188c335"},{"id":"5a11db670d8cc313b188c3a4","role_id":"5a11db640d8cc313b188c309","permission_id":"5a11db640d8cc313b188c320"},{"id":"5a4bb082840bfc48dba34863","role_id":"5a11db640d8cc313b188c307","permission_id":"5a4bb081840bfc48dba34861"},{"id":"5a4bb082840bfc48dba34864","role_id":"5a11db640d8cc313b188c307","permission_id":"5a4bb081840bfc48dba34862"}],"permissions_apps":[],"settings":[{"id":"5a11db734a0fc713dc689f85","key":"db_hash","value":"cd014ca3-cfb1-494b-b4d7-9628fcde6264","type":"core","created_at":"2017-11-19 19:28:51","created_by":"1","updated_at":"2017-11-19 19:28:51","updated_by":"1"},{"id":"5a11db734a0fc713dc689f86","key":"next_update_check","value":"1527493609","type":"core","created_at":"2017-11-19 19:28:51","created_by":"1","updated_at":"2018-05-27 07:46:49","updated_by":"1"},{"id":"5a11db734a0fc713dc689f87","key":"display_update_notification","value":"1.23.0","type":"core","created_at":"2017-11-19 19:28:51","created_by":"1","updated_at":"2018-05-27 07:46:49","updated_by":"1"},{"id":"5a11db734a0fc713dc689f88","key":"seen_notifications","value":"[]","type":"core","created_at":"2017-11-19 19:28:51","created_by":"1","updated_at":"2017-11-19 19:28:51","updated_by":"1"},{"id":"5a11db734a0fc713dc689f89","key":"title","value":"Personal Tech Blog","type":"blog","created_at":"2016-11-04 06:49:27","created_by":"1","updated_at":"2017-11-19 19:33:38","updated_by":"1"},{"id":"5a11db734a0fc713dc689f8a","key":"description","value":"","type":"blog","created_at":"2016-11-04 06:49:27","created_by":"1","updated_at":"2018-01-04 08:54:39","updated_by":"1"},{"id":"5a11db734a0fc713dc689f8b","key":"logo","value":"","type":"blog","created_at":"2016-11-04 06:49:27","created_by":"1","updated_at":"2017-11-19 19:33:38","updated_by":"1"},{"id":"5a11db734a0fc713dc689f8c","key":"cover_image","value":"","type":"blog","created_at":"2016-11-04 06:49:27","created_by":"1","updated_at":"2017-11-19 19:33:38","updated_by":"1"},{"id":"5a11db734a0fc713dc689f8d","key":"icon","value":"/content/images/2017/11/962863.png","type":"blog","created_at":"2017-11-19 19:28:51","created_by":"1","updated_at":"2017-11-29 04:21:34","updated_by":"1"},{"id":"5a11db734a0fc713dc689f8e","key":"default_locale","value":"en","type":"blog","created_at":"2017-11-19 19:28:51","created_by":"1","updated_at":"2017-11-19 19:28:51","updated_by":"1"},{"id":"5a11db734a0fc713dc689f8f","key":"active_timezone","value":"Europe/Amsterdam","type":"blog","created_at":"2016-11-04 06:49:27","created_by":"1","updated_at":"2017-11-19 19:34:46","updated_by":"1"},{"id":"5a11db734a0fc713dc689f90","key":"force_i18n","value":"true","type":"blog","created_at":"2017-11-19 19:28:51","created_by":"1","updated_at":"2017-11-19 19:28:51","updated_by":"1"},{"id":"5a11db734a0fc713dc689f91","key":"permalinks","value":"/:slug/","type":"blog","created_at":"2016-11-04 06:49:27","created_by":"1","updated_at":"2017-11-19 19:33:38","updated_by":"1"},{"id":"5a11db734a0fc713dc689f92","key":"amp","value":"true","type":"blog","created_at":"2017-11-19 19:28:51","created_by":"1","updated_at":"2017-11-19 19:28:51","updated_by":"1"},{"id":"5a11db734a0fc713dc689f93","key":"ghost_head","value":"<script>\n  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){\n  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),\n  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)\n  })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');\n\n  ga('create', 'UA-90658879-1', 'auto');\n  ga('send', 'pageview');\n</script>\n","type":"blog","created_at":"2016-11-04 06:49:27","created_by":"1","updated_at":"2017-11-29 04:15:36","updated_by":"1"},{"id":"5a11db734a0fc713dc689f94","key":"ghost_foot","value":"","type":"blog","created_at":"2016-11-04 06:49:27","created_by":"1","updated_at":"2017-11-19 19:33:38","updated_by":"1"},{"id":"5a11db734a0fc713dc689f95","key":"facebook","value":"","type":"blog","created_at":"2016-11-04 06:49:27","created_by":"1","updated_at":"2017-11-19 19:33:38","updated_by":"1"},{"id":"5a11db734a0fc713dc689f96","key":"twitter","value":"","type":"blog","created_at":"2016-11-04 06:49:27","created_by":"1","updated_at":"2017-11-19 19:33:38","updated_by":"1"},{"id":"5a11db734a0fc713dc689f97","key":"labs","value":"{\"publicAPI\":true}","type":"blog","created_at":"2016-11-04 06:49:27","created_by":"1","updated_at":"2017-11-19 19:33:38","updated_by":"1"},{"id":"5a11db734a0fc713dc689f98","key":"navigation","value":"[{\"label\":\"Home\",\"url\":\"/\"},{\"label\":\"Robotics\",\"url\":\"/robotics/\"},{\"label\":\"Internet of Things\",\"url\":\"/iot/\"},{\"label\":\"Deep Learning\",\"url\":\"/deep-learning/\"},{\"label\":\"Big Data\",\"url\":\"/big-data/\"}]","type":"blog","created_at":"2016-11-04 06:49:27","created_by":"1","updated_at":"2017-11-19 19:35:38","updated_by":"1"},{"id":"5a11db734a0fc713dc689f99","key":"slack","value":"[{\"url\":\"\"}]","type":"blog","created_at":"2016-11-04 06:49:27","created_by":"1","updated_at":"2017-11-19 19:33:38","updated_by":"1"},{"id":"5a11db734a0fc713dc689f9a","key":"unsplash","value":"{\"isActive\":true}","type":"blog","created_at":"2017-11-19 19:28:51","created_by":"1","updated_at":"2017-11-19 19:34:46","updated_by":"1"},{"id":"5a11db734a0fc713dc689f9b","key":"active_theme","value":"ghostium","type":"theme","created_at":"2017-11-19 19:28:51","created_by":"1","updated_at":"2018-01-04 08:51:44","updated_by":"1"},{"id":"5a11db734a0fc713dc689f9c","key":"active_apps","value":"[]","type":"app","created_at":"2017-11-19 19:28:51","created_by":"1","updated_at":"2017-11-19 19:28:51","updated_by":"1"},{"id":"5a11db734a0fc713dc689f9d","key":"installed_apps","value":"[]","type":"app","created_at":"2017-11-19 19:28:51","created_by":"1","updated_at":"2017-11-19 19:28:51","updated_by":"1"},{"id":"5a11db734a0fc713dc689f9e","key":"is_private","value":"false","type":"private","created_at":"2016-11-04 06:49:27","created_by":"1","updated_at":"2017-11-19 19:33:38","updated_by":"1"},{"id":"5a11db734a0fc713dc689f9f","key":"password","value":"","type":"private","created_at":"2016-11-04 06:49:27","created_by":"1","updated_at":"2017-11-19 19:33:38","updated_by":"1"},{"id":"5a11db734a0fc713dc689fa0","key":"public_hash","value":"565b7024dc34497643d22d38027245","type":"private","created_at":"2017-11-19 19:28:51","created_by":"1","updated_at":"2017-11-19 19:28:51","updated_by":"1"}],"tags":[{"id":"5a11db640d8cc313b188c302","name":"Getting Started","slug":"getting-started","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2017-11-19 19:28:36","created_by":"1","updated_at":"2017-11-19 19:28:36","updated_by":"1"},{"id":"5a11dc914a0fc713dc689fa7","name":"raspberry","slug":"raspberry","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2016-12-18 18:15:25","created_by":"1","updated_at":"2017-12-22 12:11:27","updated_by":"1"},{"id":"5a11dc914a0fc713dc689fa8","name":"arduino","slug":"arduino","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2016-12-18 18:15:25","created_by":"1","updated_at":"2017-12-22 12:11:27","updated_by":"1"}],"posts_tags":[{"id":"5a11dc924a0fc713dc689fc5","post_id":"5a11dc914a0fc713dc689faa","tag_id":"5a11db640d8cc313b188c302","sort_order":0},{"id":"5a11dc924a0fc713dc689fc6","post_id":"5a11dc914a0fc713dc689fb2","tag_id":"5a11dc914a0fc713dc689fa7","sort_order":0},{"id":"5a11dc924a0fc713dc689fc7","post_id":"5a11dc914a0fc713dc689fb3","tag_id":"5a11dc914a0fc713dc689fa7","sort_order":0},{"id":"5a11dc924a0fc713dc689fc8","post_id":"5a11dc914a0fc713dc689fb5","tag_id":"5a11dc914a0fc713dc689fa7","sort_order":0},{"id":"5a11dc924a0fc713dc689fc9","post_id":"5a11dc914a0fc713dc689fb3","tag_id":"5a11dc914a0fc713dc689fa8","sort_order":1},{"id":"5a11dc924a0fc713dc689fca","post_id":"5a11dc914a0fc713dc689fb5","tag_id":"5a11dc914a0fc713dc689fa8","sort_order":1}],"apps":[],"app_settings":[],"app_fields":[],"subscribers":[],"invites":[],"brute":[{"key":"+JHnSWMkbRiEW4RV1VQoA0sd7GYtQr1gZY6aPqtPeqs=","firstRequest":1527407226790,"lastRequest":1527407226790,"lifetime":1527410826798,"count":1}],"webhooks":[],"migrations_lock":[{"lock_key":"km01","locked":0,"acquired_at":"2018-01-02 16:17:05","released_at":"2018-01-02 16:17:06"}]}}]}